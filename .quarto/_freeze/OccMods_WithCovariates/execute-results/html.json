{
  "hash": "1b276563c03a3e08620b1801daa47b0a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Including Covariates in Occupancy Models\"\nauthor: \"Deon Roos\"\ndate: \"2025-05-02\"\nformat:\n  html:\n    theme: flatly\n    highlight-style: monochrome\n    code-fold: true\n    toc: true\n    toc-depth: 2\n    toc-location: right\n---\n\n\n\nOn this page, we'll start expanding on the intercept-only occupancy model from *Occupancy Models: The basics* by injecting some biology into our `etosha` elephant model.\n\nAs before, we'll use `spOccupancy` to fit the model. For visualisation, we'll also use `ggplot2` and `patchwork` (which lets you combine multiple ggplots into one).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(spOccupancy)\nlibrary(ggplot2)\nlibrary(patchwork)\n```\n:::\n\n\n\n# The theory\n\nOn the previous page, we introduced a simple occupancy model to understand the basic structure. Now, we’ll gradually increase the complexity—starting by adding covariates. These are also called *explanatory variables*, *independent variables*, or several other names (statistical terminology can be a mess).\n\nLet's revisit our simple occupancy model:\n\n$$\nz_i \\sim \\text{Bernoulli}(\\psi_i)  \\tag{State Stochastic}\n$$\n\n$$\nlogit(\\psi_i) = \\beta_0\\\\  \\tag{State Deterministic}\n$$\n\n$$\ny_{i,j} \\sim Bernoulli(p_{i,j} \\times z_i)\\\\  \\tag{Observation Stochastic}\n$$\n\n$$\nlogit(p_{i,j}) = \\alpha_0  \\tag{Observation Deterministic}\n$$\n\nI've included the tags on the right to help distinguish the two types of equations. *Stochastic* refers to the parts of the model that deal with randomness. *Deterministic* refers to the parts that explain *why* something happens. The *state model* explains whether a species is present at a site, and the *observation model* explains whether we detect it.\n\nIn this section, we’ll start by adding covariates to the deterministic parts, arbitrarily starting with the *observation model*.\n\nA quick reminder: $y$ is indexed by both $i$ (site) and $j$ (survey). This is important because it allows us to include covariates that vary by both site and survey, not just by site. For example:\n\n- A site-level covariate might be: site 1 has 20 trees, site 2 has 10.\n- A survey-level covariate might be: at site 1, the temperature was 20°C in survey 1, 15°C in survey 2, and 5°C in survey 3.\n\nThis means we can include variables that change across surveys, *as long as we measured and recorded them*.\n\nThese *survey-varying covariates* represent conditions that might affect how likely we are to detect the species. If you're using cameras, maybe fog reduces detection. If you're doing visual surveys, maybe time of day matters. These variables help us model the variables that affect detection probability.\n\n![A photo taken after some unseen animal triggered the motion sensor on a foggy day.](images/fog.jpg)\n\nI’ll simulate a new dataset with a bit more data to work with: 64 sites, each surveyed three times. This time, I’ll include a detection covariate; *rainfall*.\n\nNote that the values for rainfall are *centred on zero*. You don’t need to worry about the details for now - you don't need to do this but you can if you want to. For now: the higher the value of `rain`, the more rainfall there was in that site, on that survey.\n\nHere’s what the data looks like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ndat <- simOcc(J.x = 8, \n              J.y = 8, \n              n.rep = rep(3, times = 8 * 8), \n              beta = c(1), \n              alpha = c(-2, 0.5))\nobs <- dat$y\ndet_cov <- dat$X.p[,,2]\ndf <- data.frame(\n  survey = rep(1:3, each = 64),\n  cov = c(det_cov[,1], det_cov[,2], det_cov[,3]),\n  y = c(obs[,1], obs[,2], obs[,3])\n)\n\np1 <- ggplot(df) +\n  geom_boxplot(aes(x = factor(survey), y = cov)) +\n  geom_jitter(aes(x = factor(survey), y = cov),\n              width = 0.2, height = 0) +\n  labs(x = \"Survey\", y = \"Rainfall\") +\n  theme_minimal()\n\np2 <- ggplot(df) +\n  geom_jitter(aes(y = factor(y), x = cov),\n              alpha = 0.4, width = 0, height = 0.1) +\n  labs(x = \"Rainfall\", y = \"Elephant detection\") +\n  theme_minimal()\n\nobs_long <- as.data.frame(obs)\ncolnames(obs_long) <- paste0(\"Survey_\", 1:ncol(obs_long))\nobs_long$Site <- 1:nrow(obs_long)\n\nlibrary(tidyr)\nobs_long <- pivot_longer(obs_long, \n                         cols = starts_with(\"Survey\"), \n                         names_to = \"Survey\", \n                         values_to = \"Detection\")\n\nobs_long$Survey <- factor(obs_long$Survey, levels = paste0(\"Survey_\", 1:ncol(obs)))\nobs_long$Detection <- factor(obs_long$Detection, levels = c(1, 0), labels = c(\"Detection\", \"No detection\"))\n\n p3 <- ggplot(obs_long, aes(x = Site, y = Survey, fill = Detection)) +\n  geom_tile(color = \"white\") +\n  scale_fill_manual(values = c(\"Detection\" = \"darkgreen\", \"No detection\" = \"lightgrey\")) +\n  labs(x = \"Site\", y = \"Survey\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\ndesign <- \"\nAB\nAB\nCC\n\"\n\np1 + p2 + p3 + plot_annotation(tag_levels = \"A\", tag_suffix = \")\") + plot_layout(design = design)\n```\n\n::: {.cell-output-display}\n![](OccMods_WithCovariates_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n**A)** shows the amount of rainfall across each survey. Each point represents a site in a given survey. **B)** shows rainfall plotted against whether or not an elephant was detected. **C)** shows the detection history, with detections coloured green and non-detections in grey.\n\nNotice anything?\n\nIn **A)**, we can see that rainfall varies widely across the 64 sites in each survey, with a possible peak in survey 2.  \nIn **B)**, it looks like elephants might be detected more often when there’s more rainfall.  \nIn **C)**, we see that detections usually happen in just one survey per site, with no detection in the others. Remember the closure assumption; we assume that if elephants were detected once, they were present during all surveys at that site.\n\nNow consider **B)** more carefully. How confident are you that rainfall influences detection probability? If you think it does, how strong is that effect? Can you say exactly *how* strong it is?\n\nYou probably can't, and that’s where we need statistics.\n\nLet’s add rainfall as a covariate in the model. I’ll reuse the basic model structure from the previous page but now include rainfall as a detection covariate.\n\n## Data preparation\n\nJust like on the previous page, we need to include our datasets in a `list`. If you're still unsure what a `list` is in R, think of it like a folder on your computer. You can add lots of different files to a folder—any type of file—and they’re all \"tied together\" by being in the same place. A `list` in R works the same way.\n\nThe complication now is that I have *two* datasets. One for my detection history matrix and another for the *rain* covariate. To include both, I’m going to do something that might seem a little strange at first. I’ll create a `list` for the detection covariate and then include that list inside our main `etosha` list. That gives us a list *within* a list.\n\nWhy? Because we might want to add more than one detection covariate later. Even though it feels redundant now, this structure makes it easier to expand the model in the future.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note you wouldn't need to do the dat$X.p[,,2] bit\n# That's just because the data is simulated.\ndet.covs <- list(rain = dat$X.p[,,2])\n\netosha <- list(\n  y = dat$y,\n  det.covs = det.covs\n)\n```\n:::\n\n\n\nAnd with that, we’re ready to move on to modelling.\n\n## Fitting the model\n\nHere are a few things to note about the model specification:\n\n- `occ.formula = ~ 1` corresponds to the equation  \n  $$\n  \\text{logit}(\\psi_i) = \\beta_0\n  $$  \n  This is an intercept-only occupancy model, meaning we are not including any covariates for the probability that a site is occupied.\n\n- `det.formula = ~ rain` corresponds to the equation  \n  $$\n  \\text{logit}(p_i) = \\alpha_0 + \\alpha_1 \\times \\text{Rain}_i\n  $$  \n  This means we are modelling detection probability as a function of rainfall. The model includes both an intercept ($\\alpha_0$) and a slope for rain ($\\alpha_1$).\n\n- We specify that all the data needed for the model is contained in the list called `etosha` (think of it like a folder that holds everything in one place).\n\n- The remaining arguments (such as `n.chains`) control how the Bayesian model is run. You can ignore these for now.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- PGOcc(\n  # The state model (i.e. what % that elephants are present?)\n  # ~ 1 means we want an intercept only model (no covariates)\n  occ.formula = ~ 1, \n  # The observation model (i.e. what % that we see elephants if present?)\n  det.formula = ~ rain, \n  # Our carefully formatted dataset\n  data = etosha, \n  \n  # Details to get the machinery to run that we'll ignore for now\n  n.chains = 4,\n  n.samples = 2000,\n  n.burn = 200,\n  verbose = FALSE)\n```\n:::\n\n\n\n## Interpreting\n\nNow that we’ve fit the model to the data, we can see what we’ve learned.\n\nCompared to the model on the previous page, we now have additional output under `Detection (logit scale)`. Specifically, we have estimates for both `(Intercept)` and `rain`. These correspond to $\\alpha_0$ and $\\alpha_1$ in our detection model:\n\n$$\n\\text{logit}(p_i) = \\alpha_0 + \\alpha_1 \\times \\text{Rain}_i\n$$\n\nIf we want, we can substitute in the estimated values (rounded to two decimal places) and rewrite the model like this:\n\n$$\nz_i \\sim \\text{Bernoulli}(\\psi_i) \\tag{State Stochastic}\n$$\n\n$$\n\\text{logit}(\\psi_i) = 1.88 \\tag{State Deterministic}\n$$\n\n$$\ny_{i,j} \\sim \\text{Bernoulli}(p_{i,j} \\times z_i) \\tag{Observation Stochastic}\n$$\n\n$$\n\\text{logit}(p_{i,j}) = -1.89 + 0.69 \\times \\text{Rain}_i \\tag{Observation Deterministic}\n$$\n\nThis final equation lets us calculate detection probabilities for different rainfall values. For example, when $\\text{Rain} = 1$ (which corresponds to heavy rainfall in this dataset), we get:\n\n$$\n\\text{logit}(p) = -1.89 + 0.69 \\times 1 = -1.2\n$$\n\nTo convert this logit value back to a probability, we apply the inverse logit (also called the logistic function):\n\n$$\np = \\frac{1}{1 + \\exp(-(-1.20))} = \\frac{1}{1 + \\exp(1.20)} = 0.23 = 23\\%\n$$\n\nOr we could just do `plogis(-1.89 + 0.69 * 1)`.\n\nWhen $Rain = 0$ (moderate rainfall), the logit becomes -1.89, which converts to a detection probability of about 13%.\n\nThis process, whereby we plug in a covariate value to make a prediction, is something we can repeat for many values of `rain`. Doing so allows us to build the predicted relationship that shows how detection probability changes with rainfall.\n\nNext, we’ll create that prediction curve and visualise the effect of rainfall on detection.\n\n## Plot predicted relationships\n\nTo visualise the relationship between rainfall and detection probability, we first create a sequence of `Rain` values. Rather than calculating one at a time as we just did, we’ll use the `seq()` function to generate a smooth range of values between the minimum and maximum rainfall in our dataset. Here, we use 20 points to draw a smooth line, but you could choose any number depending on the level of detail you want.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrain <- seq(from = min(det.covs$rain),\n            to = max(det.covs$rain),\n            length.out = 20)\n\nrain\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -2.71815687 -2.44127881 -2.16440076 -1.88752271 -1.61064465 -1.33376660\n [7] -1.05688855 -0.78001049 -0.50313244 -0.22625439  0.05062367  0.32750172\n[13]  0.60437977  0.88125783  1.15813588  1.43501393  1.71189199  1.98877004\n[19]  2.26564809  2.54252615\n```\n\n\n:::\n:::\n\n\n\nNow that we have our sequence of rainfall values, we want to calculate the predicted detection probability for each one. Because `R` works with vectors (columns of values), we can apply our model equation to the entire sequence in one step.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred <- plogis(-1.89 + 0.69 * rain)\npred\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.02263134 0.02726568 0.03281714 0.03945308 0.04736516 0.05677017\n [7] 0.06790956 0.08104689 0.09646267 0.11444547 0.13527876 0.15922259\n[13] 0.18649040 0.21722152 0.25145143 0.28908330 0.32986526 0.37337882\n[19] 0.41904309 0.46613767\n```\n\n\n:::\n:::\n\n\n\nThis gives us a predicted detection probability for each rainfall value. That’s useful, but a raw table of numbers wouldn’t be very effective in a thesis or presentation. It’s far clearer to visualise this relationship in a figure.\n\nTo do that, we combine the rainfall values and their corresponding predicted probabilities into a new dataset and then plot the relationship using `ggplot2`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  pred,\n  rain\n)\n\nggplot(df) +\n  geom_line(aes(x = rain, y = pred))\n```\n\n::: {.cell-output-display}\n![](OccMods_WithCovariates_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nThe resulting figure makes it much easier to interpret the model. We can now clearly see that detection probability increases with rainfall.\n\nWe can also tidy up the plot to make it more visually effective, by doing relatively small things like adjusting axis labels, converting probabilities to percentages, and applying a clean theme.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df) +\n  geom_line(aes(x = rain, y = pred)) +\n  scale_y_continuous(labels = scales::percent,\n                     limits = c(0,1)) +\n  theme_minimal() +\n  labs(x = \"Mean rainfall\",\n       y = \"Predicted detection\\nprobability of elephants\")\n```\n\n::: {.cell-output-display}\n![](OccMods_WithCovariates_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n### Biological interpretation\n\nFrom the plot, it looks like elephants are more likely to be detected when it rains. If this were real data, we might start discussing ecological explanations. But here's a key point:\n\n**We should have thought about this before fitting the model.**\n\nInterpreting results *after* seeing them and retroactively inventing explanations is risky. It’s called *HARKing*; *Hypothesising After the Results are Known* and it’s a form of scientific misconduct. It leads to misleading conclusions and reduces the credibility of research. Don't do it. Even if it's just for your own integrity.\n\nHere, the data are simulated, so the stakes are low. The goal is to understand the modelling process. But in real research, it’s essential to define your question, hypotheses and state your predictions before doing the analysis. This starts going down the road of *pre-registration* but I won't touch on that here.\n\nSo while visualising and interpreting your model is valuable, doing so responsibly is just as important.\n\n## Uncertainty\n\nThe figure we created is a good start, but it’s missing something important: uncertainty.\n\nIf we were using frequentist statistics, we’d include 95% confidence intervals. But in the Bayesian framework, confidence intervals don’t exist. Instead, we use *credible intervals*.\n\nHere’s the formal definition of a 95% *credible interval*:\n\n> There is a 95% probability that the **true** parameter value lies within the interval range, given the data and model.\n\nThis contrasts with frequentist confidence intervals, whose definition is more convoluted and often misunderstood. In fact, credible intervals behave exactly the way most people *think* confidence intervals do. I’ll explain the Bayesian framework more fully in a later section but for now, just trust me that credible intervals are more intuitive and arguably more useful.\n\n### How do we show credible intervals on our figure?\n\nThe model summary includes everything we need. The `2.5%` and `97.5%` columns from the summary output give us the lower and upper bounds of the credible interval for each parameter.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nPGOcc(occ.formula = ~1, det.formula = ~rain, data = etosha, n.samples = 2000, \n    verbose = FALSE, n.burn = 200, n.chains = 4)\n\nSamples per Chain: 2000\nBurn-in: 200\nThinning Rate: 1\nNumber of Chains: 4\nTotal Posterior Samples: 7200\nRun Time (min): 0.0172\n\nOccurrence (logit scale): \n              Mean     SD   2.5%   50%  97.5%   Rhat ESS\n(Intercept) 1.8753 0.9465 0.3078 1.772 4.0465 1.0516 349\n\nDetection (logit scale): \n               Mean     SD    2.5%     50%   97.5%   Rhat  ESS\n(Intercept) -1.8872 0.2946 -2.4610 -1.8939 -1.2939 1.0165 1038\nrain         0.6930 0.2384  0.2328  0.6877  1.1801 1.0025 2604\n```\n\n\n:::\n:::\n\n\n\nTo incorporate these into our plot, we repeat the prediction process we used earlier but this time, we use the lower and upper parameter estimates to calculate the corresponding detection probabilities. These will form the bounds of our uncertainty ribbon.\n\nOne important note: you do **not** need to multiply the standard error by 1.96 (as we did in BI3010). That approach belongs to the frequentist framework. With Bayesian models, we work directly with the posterior distributions and their quantiles, no extra calculation needed.\n\nLet's do just that:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$low <- plogis(-2.4610 + 0.2328 * df$rain)\ndf$upp <- plogis(-1.2939 + 1.1801 * df$rain)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         pred        rain        low        upp\n1  0.02263134 -2.71815687 0.04336427 0.01096960\n2  0.02726568 -2.44127881 0.04611831 0.01514457\n3  0.03281714 -2.16440076 0.04903828 0.02087495\n4  0.03945308 -1.88752271 0.05213304 0.02871039\n5  0.04736516 -1.61064465 0.05541172 0.03936862\n6  0.05677017 -1.33376660 0.05888379 0.05376451\n7  0.06790956 -1.05688855 0.06255900 0.07302436\n8  0.08104689 -0.78001049 0.06644741 0.09846565\n9  0.09646267 -0.50313244 0.07055932 0.13151304\n10 0.11444547 -0.22625439 0.07490526 0.17351714\n11 0.13527876  0.05062367 0.07949599 0.22545433\n12 0.15922259  0.32750172 0.08434241 0.28752905\n13 0.18649040  0.60437977 0.08945559 0.35877811\n14 0.21722152  0.88125783 0.09484663 0.43685701\n15 0.25145143  1.15813588 0.10052670 0.51819600\n16 0.28908330  1.43501393 0.10650691 0.59858193\n17 0.32986526  1.71189199 0.11279825 0.67399363\n18 0.37337882  1.98877004 0.11941156 0.74135968\n19 0.41904309  2.26564809 0.12635738 0.79895748\n20 0.46613767  2.54252615 0.13364590 0.84638633\n```\n\n\n:::\n:::\n\n\n\nOnce we’ve calculated the lower and upper bounds, we can visualise the uncertainty using `geom_ribbon()` in `ggplot2`. This shaded area gives a clear, intuitive representation of the uncertainty around our predictions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df) +\n  geom_line(aes(x = rain, y = pred)) +\n  geom_ribbon(aes(x = rain, ymin = low, ymax = upp),\n              alpha = 0.3) +\n  scale_y_continuous(labels = scales::percent,\n                     limits = c(0,1)) +\n  theme_minimal() +\n  labs(x = \"Mean rainfall\",\n       y = \"Predicted detection\\nprobability of elephants\")\n```\n\n::: {.cell-output-display}\n![](OccMods_WithCovariates_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nThe result is a publication- or thesis-ready figure: a smooth line showing the predicted detection probability as rainfall increases, surrounded by a shaded band representing the credible interval.\n\n# Multiple covariates\n\nLet’s increase the complexity by including multiple covariates in our simulation. We’ll assume that *tree height* and *average temperature* affect whether or not a site is occupied, where elephants prefer taller trees and cooler conditions. As before, *rainfall* will influence detection probability.\n\n> **Technical note:** To create the figures below, I needed to slightly restructure the data. The object used for plotting has one row per survey, with three surveys per site. The occupancy covariates (`tree` and `temp`) do not change across surveys, if a tree is 3 metres tall in survey one, it’s still 3 metres tall in surveys two and three. That’s why these variables are “recycled” or repeated across surveys.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ndat <- simOcc(J.x = 8, \n              J.y = 8, \n              n.rep = rep(3, times = 8 * 8), \n              beta = c(1, -0.2, 0.3), \n              alpha = c(-2, 0.5))\nobs <- dat$y\ntemp <- dat$X[,2]\ntree <- dat$X[,3]\ndet_cov <- dat$X.p[,,2]\ndf <- data.frame(\n  survey = rep(1:3, each = 64),\n  cov = c(det_cov[,1], det_cov[,2], det_cov[,3]),\n  tree = rep(tree, times = 3),\n  temp = rep(temp, times = 3),\n  y = c(obs[,1], obs[,2], obs[,3])\n)\n\np1 <- ggplot(df) +\n  geom_histogram(aes(x = temp)) +\n  labs(y = \"Count\", x = \"Temperature\") +\n  theme_minimal()\n\np2 <- ggplot(df) +\n  geom_jitter(aes(y = factor(y), x = temp),\n              alpha = 0.4, width = 0, height = 0.1) +\n  labs(x = \"Temperature\", y = \"Elephant\\ndetection\") +\n  theme_minimal()\n\np3 <- ggplot(df) +\n  geom_histogram(aes(x = tree)) +\n  labs(x = \"Tree height\", y = \"Count\") +\n  theme_minimal()\n\np4 <- ggplot(df) +\n  geom_jitter(aes(y = factor(y), x = tree),\n              alpha = 0.4, width = 0, height = 0.1) +\n  labs(x = \"Tree\", y = \"Elephant\\ndetection\") +\n  theme_minimal()\n\np5 <- ggplot(df) +\n  geom_histogram(aes(x = cov)) +\n  labs(x = \"Rain\", y = \"Count\") +\n  theme_minimal()\n\np6 <- ggplot(df) +\n  geom_jitter(aes(y = factor(y), x = tree),\n              alpha = 0.4, width = 0, height = 0.1) +\n  labs(x = \"Rain\", y = \"Elephant\\ndetection\") +\n  theme_minimal()\n\nobs_long <- as.data.frame(obs)\ncolnames(obs_long) <- paste0(\"Survey_\", 1:ncol(obs_long))\nobs_long$Site <- 1:nrow(obs_long)\n\nobs_long <- pivot_longer(obs_long, \n                         cols = starts_with(\"Survey\"), \n                         names_to = \"Survey\", \n                         values_to = \"Detection\")\n\nobs_long$Survey <- factor(obs_long$Survey, levels = paste0(\"Survey_\", 1:ncol(obs)))\nobs_long$Detection <- factor(obs_long$Detection, levels = c(1, 0), labels = c(\"Detection\", \"No detection\"))\n\n p7 <- ggplot(obs_long, aes(x = Site, y = Survey, fill = Detection)) +\n  geom_tile(color = \"white\") +\n  scale_fill_manual(values = c(\"Detection\" = \"darkgreen\", \"No detection\" = \"lightgrey\")) +\n  labs(x = \"Site\", y = \"Survey\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n design <- \"\n AB\n AB\n CD\n CD\n EF\n EF\n GG\n GG\n \"\n \np1 + p2 + p3 + p4 + p5 + p6 + p7 +\n   plot_annotation(tag_levels = \"A\", tag_suffix = \")\") + \n   plot_layout(design = design)\n```\n\n::: {.cell-output-display}\n![](OccMods_WithCovariates_files/figure-html/unnamed-chunk-12-1.png){width=1152}\n:::\n:::\n\n\n\n### What do the figures show?\n\nThere are two important things to notice:\n\n1. **Covariate types**  \n   In plots **A)** to **D)**, you’ll see that *temperature* and *tree height* do not vary from one survey to the next. These are constant within each site and are used as *site-level covariates* in the model.  \n   On the other hand, **E)** and **F)** show that *rainfall* does vary between surveys and between sites. This makes it a *survey-level covariate*.\n\n   > *Note:* It’s technically possible to have site covariates that vary across time, but we’ll keep things simple here.\n\n2. **Misleading visual patterns**  \n   In plots **B)** and **D)** (temperature and tree height vs. detection), it’s hard to spot a clear relationship just by looking. That’s because not all zeros in detection are equal; some are true absences, and others are *false negatives*. In this simulation, we know which is which, but in real data we wouldn’t. The presence of false negatives hides the true relationship between covariates and elephant presence.\n\nThis is exactly why we need a model.\n\nVisual inspection can only take us so far, especially when detection is imperfect. We need a statistical model to help uncover the true patterns in the data.\n\nLet’s get the data organised so we can fit that model.\n\n## Data preparation\n\nAs before, we include our *survey covariates* as a `list`, while *site covariates* can be supplied as a `data.frame`. Both are then combined in another `list`, which is what we pass to the model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Survey covariate\ndet.covs <- list(rain = dat$X.p[,,2])\n# Site covariates\nocc.covs <- data.frame(tree = tree, temp = temp)\n# Combine into a single list called etosha\netosha <- list(\n  y = dat$y, # Detection history\n  det.covs = det.covs,\n  occ.covs = occ.covs\n)\n```\n:::\n\n\n\n## Fitting the model\n\nThe core model we’re fitting now includes two site covariates and one survey covariate:\n\n$$z_i \\sim Bernoulli(\\psi_i)$$\n\n$$logit(\\psi_i) = \\beta_0 + \\beta_1 \\times Tree_i + \\beta_2 \\times Temp_i\\\\$$\n\n$$y_{i,j} \\sim Bernoulli(p_{i,j} \\times z_i)\\\\$$\n\n$$logit(p_{i,j}) = \\alpha_0 + \\alpha_1 \\times Rain_{i,j}$$\n\nWhat’s important to notice here, aside from the inclusion of `Tree` and `Temp` in the state model, is the use of subscripts.\n\nIn the state model, the covariates are subscripted by $i$, meaning each site has one value for `Tree` and `Temp`. In the observation model, `Rain` is subscripted by both $i$ and $j$, meaning it can vary between sites *and* surveys. This reflects how you’d record rainfall each time you visit a site.\n\nKeep this in mind when collecting your own data:\n\n- **Occupancy covariates** usually vary by site, not by survey.\n- **Detection covariates** typically vary by survey (i.e. time).\n\nThat’s the general rule, but if you're unsure or have an unusual situation, ask me.\n\nTo fit this model, we specify the occupancy formula as `~ tree + temp` and the detection formula as `~ rain`. The rest of the model setup (e.g. number of chains, samples, etc.) stays the same.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- PGOcc(\n  occ.formula = ~ tree + temp, \n  det.formula = ~ rain, \n  data = etosha, \n  \n  # Details to get the machinery to run that we'll ignore for now\n  n.chains = 4,\n  n.samples = 2000,\n  n.burn = 200,\n  verbose = FALSE)\n```\n:::\n\n\n\n## Interpreting the results\n\nOnce the model has run, we can inspect the estimates using `summary()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nPGOcc(occ.formula = ~tree + temp, det.formula = ~rain, data = etosha, \n    n.samples = 2000, verbose = FALSE, n.burn = 200, n.chains = 4)\n\nSamples per Chain: 2000\nBurn-in: 200\nThinning Rate: 1\nNumber of Chains: 4\nTotal Posterior Samples: 7200\nRun Time (min): 0.0172\n\nOccurrence (logit scale): \n               Mean     SD    2.5%     50%  97.5%   Rhat ESS\n(Intercept)  1.9515 1.0600  0.1862  1.8333 4.2716 1.0441 347\ntree         0.3649 1.2506 -2.0020  0.3180 2.8503 1.0383 293\ntemp        -1.1005 1.1484 -3.2573 -1.1617 1.3032 1.0452 277\n\nDetection (logit scale): \n               Mean     SD    2.5%     50%   97.5%   Rhat  ESS\n(Intercept) -1.8428 0.2636 -2.3606 -1.8424 -1.3199 1.0023 1404\nrain         0.1730 0.2214 -0.2499  0.1707  0.6115 1.0023 2983\n```\n\n\n:::\n:::\n\n\n\nWe see that `tree` has a positive effect on occupancy (estimated at 0.3649), and `temp` has a negative effect (-1.1005). These estimates are in the general direction of the true values used in the simulation, though they’re not perfect:\n\n- `tree` was simulated at 0.3 and estimated at 0.37 (very close)\n- `temp` was simulated at -0.2 but estimated at -1.1 (more of a difference)\n\nWhile the estimated relationship for `temp` is \"correct\" in that it gets the direction right (it's a negative effect), it's kind of far away from the true value that was specified in the simulation. That’s where *credible intervals* become useful. Remember, a 95% credible interval means there’s a 95% chance the true parameter lies within that range. In our case, the true values for both `tree` and `temp` do fall within their respective 95% credible intervals. This is good, it tells us the model reflects its uncertainty accurately, which is especially important with small sample sizes or subtle effects.\n\n## Diagnosing potential issues\n\nThere are two early warning signs that suggest this model might not be performing optimally:\n\n1. **Rhat values**  \n   The Rhat values for the `Occurrence` parameters are getting close to 1.05. While they haven’t crossed the danger threshold, they’re high enough to warrant attention. My personal rule of thumb is to start worrying around 1.05.\n\n2. **Effective Sample Size (ESS)**  \n   The ESS for the `Occurrence` parameters is noticeably lower than for the detection parameters. While we still have several hundred samples, which is generally acceptable, it’s another flag that suggests the model might benefit from refinement.\n\nIn our first model earlier on the previous page (the intercept only occupancy model), we ignored these diagnostics (in part because there were no issues). This time, we’ll see if we can address them to improve model performance.\n\n## Resolving issues\n\nTo fully understand how to resolve issues like high `Rhat` or low `ESS` values requires a deeper dive into Bayesian statistics. We’ll save that for a later section. For now, here’s a simplified explanation:\n\nThe Bayesian framework relies on algorithms, called *chains*, that take many *iterations* (or guesses) to estimate the most likely values of the model parameters.\n\nThe two metrics we use to assess how well this process is working are:\n\n- *`Rhat`*: Tells us whether the different chains agree with each other (or have *converged* to more-or-less the same answer). Higher values suggest poor convergence.\n- *`ESS` (Effective Sample Size)*: Indicates how well the parameter was estimated. Lower values suggest greater uncertainty or inefficiency.\n\nIf `Rhat` values are high or `ESS` values are low, one common fix is to increase the number of iterations. This gives the algorithms more opportunities to find consistent and stable parameter estimates.\n\nSo let’s do just that: we increase the total number of iterations to 3000 per chain, and slightly increase the number of burn-in iterations (guesses that we ignore from when the algorithm starts) to account for that change.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- PGOcc(\n  occ.formula = ~ tree + temp, \n  det.formula = ~ rain, \n  data = etosha, \n  \n  # We're using four chains/algorithms\n  n.chains = 4,\n  # We allow 3000 guesses (increased from 2000)\n  n.samples = 3000,\n  # We ignore the first 300 (increased from 200)\n  # We ignore them because we assume the algorithms are not particularly reliable\n  # in the first ca. 10% of guesses\n  n.burn = 300,\n  verbose = FALSE)\n```\n:::\n\n\n\nAfter running the model again, we can check the summary output. If all goes well, we hope to see:\n\n- `Rhat` values closer to 1\n- Higher `ESS` values for the occupancy parameters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nPGOcc(occ.formula = ~tree + temp, det.formula = ~rain, data = etosha, \n    n.samples = 3000, verbose = FALSE, n.burn = 300, n.chains = 4)\n\nSamples per Chain: 3000\nBurn-in: 300\nThinning Rate: 1\nNumber of Chains: 4\nTotal Posterior Samples: 10800\nRun Time (min): 0.025\n\nOccurrence (logit scale): \n               Mean     SD    2.5%     50%  97.5%   Rhat ESS\n(Intercept)  1.9586 1.0113  0.1496  1.8785 4.0979 1.0061 533\ntree         0.3562 1.2971 -2.0341  0.3101 2.9698 1.0498 415\ntemp        -1.2475 1.0628 -3.3183 -1.2672 0.9406 1.0176 470\n\nDetection (logit scale): \n               Mean     SD    2.5%     50%   97.5%   Rhat  ESS\n(Intercept) -1.8461 0.2664 -2.3631 -1.8497 -1.3123 1.0014 1625\nrain         0.1791 0.2196 -0.2462  0.1772  0.6243 1.0016 4411\n```\n\n\n:::\n:::\n\n\n\nNow when we look at the `Rhat` and `ESS` values, we are doing better. Still not perfect but good enough for me to be happy that *by these two metrics alone* there's nothing to suggest the machinery is struggling and that the parameters are being estimated as robustly as possible.\n\nThis won’t always fix every problem, but in many cases it’s a simple and effective first step.\n\n> Note: `Rhat` and `ESS` are not the only diagnostics we can use. In a later section, we’ll explore other ways to assess how well our model is performing.\n\nFor now, based on these two metrics, we’re happy that the model has converged and is estimating parameters robustly. We can now move on to plotting the predicted relationships.\n\n## Plot predicted relationships\n\nPreviously, we generated predictions by hand using parameter estimates and \"manual\" calculations. This time, we’ll (kind of) simplify things by using the `predict()` function, which does most of the heavy lifting for us. The overall process is still the same:\n\n1. Create a “fake” dataset with covariate values for which we want predictions.\n2. Apply the model to these values to generate predicted responses.\n3. Convert logit values to probabilities.\n4. Plot the predicted probabilities against covariate values to show the relationship.\n\nRemember, occupancy models are essentially two connected Bernoulli GLMs. When using `predict()`, we must specify which part of the model we’re predicting from: `occupancy` or `detection`.\n\nNormally, when plotting the effect of one covariate (e.g. `tree`), we hold the other covariates constant—typically at their median values, just like you did in BI3010.\n\nHowever, for these models there are a few extra (annoying) things we need to do and for me to explain here. As a warning some of these get quite technical. It might be a good time to take a break and come back when you're fresh.\n\nHowever, with `spOccupancy`, there are a few additional steps involved. Some are a bit technical, so if you’re feeling tired, it might be a good point to pause and return later. If you’re confused by anything below, don’t worry, we can talk it through in person.\n\n### Model matrix\n\nTo make predictions, we need to pass a *design matrix* to the `predict()` function. This is done using `model.matrix()`. It turns your covariate data (like `tree` and `temp`) into the format expected by the model, where each column represents a variable, and each row represents a combination of covariate values.\n\nWhen we fit a model using `~ tree + temp`, R internally builds a model matrix. When predicting, we must do the same so the structure matches.\n\n### `qlogis` and `plogis`\n\nThe `predict()` function returns thousands of posterior draws for each site's occupancy or detection probability. These are already on the probability scale (i.e. backtransformed from the logit scale).\n\nHowever, there’s a subtle issue here. If we summarise these probability values directly (e.g. take their mean or credible intervals), the result can sometimes be misleading, especially if the underlying uncertainty is skewed. The shape of the probability distribution can become distorted and give odd patterns (like artificial peaks or dips).\n\nTo avoid this, when working with `spOccupancy`, we need to:\n\n1. Transform probabilities *back* to the logit scale using `qlogis()`.\n2. Summarise the posterior draws on the logit scale (mean and credible intervals).\n3. Transform the summaries *back* to probabilities using `plogis()`.\n\nThis avoids distortion and produces smoother, more reliable estimates.\n\n### `apply()`\n\nThe posterior samples are structured with one row per iteration (i.e. per guess) and one column per site. To summarise across iterations for each site, we use `apply()` with `MARGIN = 2` (i.e. apply the function across columns). We calculate the mean, lower (2.5%), and upper (97.5%) quantiles for each.\n\nHonestly, the code is more complex than I would like. I wish I could think of a simpler way to do it (and I might ask my wife, who's better at coding than me, to see if she can improve it) but this is the best I can do for now. Speak to me if you need help.\n\n### Plotting predictions\n\nWe can now generate prediction curves for each covariate in our model:\n\n- *Tree height* (site-level covariate affecting occupancy): Create a range of values for `tree`, hold `temp` at its median, predict, summarise, and plot.\n\n- *Temperature* (another site-level covariate): Hold `tree` at its median and repeat the steps above for `temp`.\n\n- *Rainfall* (survey-level covariate affecting detection): Generate a sequence of rainfall values and repeat the prediction and summarisation steps for detection probability.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tree height ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #\n# Step 1: Create a new fake data frame for tree (hold temp at median)\nfake <- data.frame(\n  tree = seq(min(etosha$occ.covs$tree), max(etosha$occ.covs$tree), length.out = 100),\n  temp = median(etosha$occ.covs$temp)\n)\n\n# Step 2: Convert this into a model matrix\nX.0 <- model.matrix(~ tree + temp, data = fake)\n\n# Step 3: Predict occupancy from model matrix\npred_occ <- predict(fit, X.0 = X.0, type = \"occupancy\")\n\n# Step 4: Transform back into logit values\nlogit_psi_samples <- qlogis(pred_occ$psi.0.samples)\n\n# Step 5: Summarize the posteriors\nfake <- data.frame(\n  tree = fake$tree,\n  mean.psi = apply(logit_psi_samples, 2, mean),\n  lower = apply(logit_psi_samples, 2, function(x) quantile(x, 0.025)),\n  upper = apply(logit_psi_samples, 2, function(x) quantile(x, 0.975))\n)\n\n# Step 6: Backtransform into probabilities\nfake <- data.frame(\n  tree = fake$tree,\n  mean.psi = plogis(fake$mean.psi),\n  lower = plogis(fake$lower),\n  upper = plogis(fake$upper)\n)\n\n# Step 7: Plot\np1 <- ggplot(fake, aes(x = tree, y = mean.psi)) +\n  geom_line() +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3) +\n  labs(x = \"Tree height\", y = \"Occupancy probability (ψ)\") +\n  scale_y_continuous(labels = scales::percent) +\n  theme_minimal()\n\n# Mean temperature ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #\n\n# Step 1: Create a new data frame for temp (hold tree at median)\nfake <- data.frame(\n  tree = median(etosha$occ.covs$tree),\n  temp = seq(min(etosha$occ.covs$temp), max(etosha$occ.covs$temp), length.out = 100)\n)\n\n# Step 2: Convert this into a model matrix\nX.0 <- model.matrix(~ tree + temp, data = fake)\n\n# Step 3: Predict occupancy from model matrix\npred_occ <- predict(fit, X.0 = X.0, type = \"occupancy\")\n\n# Step 4: Transform back into logit values\nlogit_psi_samples <- qlogis(pred_occ$psi.0.samples)\n\n# Step 5: Summarize the posteriors\nfake <- data.frame(\n  temp = fake$temp,\n  mean.psi = apply(logit_psi_samples, 2, mean),\n  lower = apply(logit_psi_samples, 2, function(x) quantile(x, 0.025)),\n  upper = apply(logit_psi_samples, 2, function(x) quantile(x, 0.975))\n)\n\n# Step 6: Backtransform into probabilities\nfake <- data.frame(\n  temp = fake$temp,\n  mean.psi = plogis(fake$mean.psi),\n  lower = plogis(fake$lower),\n  upper = plogis(fake$upper)\n)\n\n# Step 5: Plot\np2 <- ggplot(fake, aes(x = temp, y = mean.psi)) +\n  geom_line() +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3) +\n  labs(x = \"Temperature\", y = \"Occupancy probability (ψ)\") +\n  scale_y_continuous(labels = scales::percent) +\n  theme_minimal()\n\n# Rain fall ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #\n\n# Step 1: Create a new data frame for temp (hold tree at median)\nfake <- data.frame(\n  rain = seq(min(etosha$det.covs$rain), max(etosha$det.covs$rain), length.out = 100)\n)\n\n# Step 2: Convert this into a model matrix\nX.0 <- model.matrix(~ rain, data = fake)\n\n# Step 3: Predict occupancy from model matrix\npred_det <- predict(fit, X.0 = X.0, type = \"detection\")\n\n# Step 4: Transform back into logit values\nlogit_p_samples <- qlogis(pred_det$p.0.samples)\n\n# Step 5: Summarize the posteriors\nfake <- data.frame(\n  rain = fake$rain,\n  mean.p = apply(logit_p_samples, 2, mean),\n  lower = apply(logit_p_samples, 2, function(x) quantile(x, 0.025)),\n  upper = apply(logit_p_samples, 2, function(x) quantile(x, 0.975))\n)\n\n# Step 6: Backtransform into probabilities\nfake <- data.frame(\n  rain = fake$rain,\n  mean.p = plogis(fake$mean.p),\n  lower = plogis(fake$lower),\n  upper = plogis(fake$upper)\n)\n\n# Step 5: Plot\np3 <- ggplot(fake, aes(x = rain, y = mean.p)) +\n  geom_line() +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3) +\n  labs(x = \"Rainfall\", y = \"Detection probability (p)\") +\n  scale_y_continuous(labels = scales::percent) +\n  theme_minimal()\n\ndesign <- \"\nAB\nCC\n\"\n\np1 + p2 + p3 + plot_layout(design = design)\n```\n\n::: {.cell-output-display}\n![](OccMods_WithCovariates_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n# How should I store my data?\n\nThe data storage required for occupancy models can feel a bit complicated at first. A good starting point is to organise your data into at least *three separate datasets*, each with a specific purpose.\n\n## Dataset one: Detection history\n\nThis dataset records whether or not the species was detected during each survey at each site.\n\nCreate an Excel sheet where **rows are sites (or cameras)** and **columns are survey periods**. For example, if your sampling unit is a 12-hour period and you have three surveys per site, your dataset might look like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DT)\n\ndh <- data.frame(\n  \"1\" = rbinom(50, size = 1, prob = 0.3),\n  \"2\" = rbinom(50, size = 1, prob = 0.5),\n  \"3\" = rbinom(50, size = 1, prob = 0.4),\n  check.names = FALSE\n)\n\ndatatable(dh, options = list(pageLength = 10))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-6a5b8e28d95e624543d1\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6a5b8e28d95e624543d1\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\"],[1,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,0,1,1,0,0],[1,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,0,0,1,0,1,1,0,1,1,1,1,0,0,0,0,1,1,0,1],[0,0,1,1,0,0,1,0,0,0,1,0,1,1,1,1,0,1,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,1,1]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>1<\\/th>\\n      <th>2<\\/th>\\n      <th>3<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":10,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"1\",\"targets\":1},{\"name\":\"2\",\"targets\":2},{\"name\":\"3\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n- Row 1: Site 1 detections for surveys 1, 2, 3  \n- Row 2: Site 2 detections for surveys 1, 2, 3  \n- etc.\n\nEach cell should be a `1` (detection) or `0` (no detection).\n\n## Dataset two: Site-level covariates\n\nThis dataset contains all of your **site covariates**, variables that do not change from one survey to the next. These should be organised in the **same order** as your detection history dataset.\n\n> **This is crucial.** If site 1 is the first row in your detection history, it must also be the first row here. Check and double-check that the site ordering is consistent across files.\n\nEach covariate should be a column. For example:\n\n- Distance to nearest road  \n- Distance to nearest release pen  \n- Habitat type\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  road = round(rgamma(50, 1, 2), digits = 3),\n  pen = round(rgamma(50, 2, 3), digits = 1),\n  habitat = sample(size = 50, x = c(\"Forest\", \"Field\"), prob = c(0.5, 0.5), replace = TRUE)\n)\n\ndatatable(df, options = list(pageLength = 10))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-3591f1c01266d8b71d79\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-3591f1c01266d8b71d79\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\"],[0.266,0.212,1.84,0.844,0.023,0.63,0.212,1.082,0.032,0.6,0.6899999999999999,0.902,0.491,0.301,0.155,1.073,1.296,0.474,0.495,0.774,0.029,0.505,0.271,0.386,0.01,0.8139999999999999,0.27,0.946,0.22,0.485,1.123,0.82,0.6820000000000001,0.844,1.054,1.511,0.056,0.324,0.196,0.345,0.433,1.509,0.218,0.472,1.071,0.017,0.063,0.211,0.262,0.011],[0.5,0.8,0.3,0,0.2,0.2,1,0.2,1,0.4,1.2,0.2,0.3,0.6,0.4,0.5,1.1,1.7,0.2,0.4,0.7,0.4,1,1.2,0.2,0.4,0.1,0.7,0.5,0.2,0.8,0.5,0.4,0.2,1,0.8,0.2,1.5,0.6,0.6,0.3,0.2,0.4,0.6,0.5,0.3,2.6,0.4,0.3,1.4],[\"Field\",\"Forest\",\"Field\",\"Forest\",\"Forest\",\"Field\",\"Field\",\"Field\",\"Field\",\"Field\",\"Forest\",\"Field\",\"Field\",\"Forest\",\"Forest\",\"Forest\",\"Field\",\"Field\",\"Field\",\"Forest\",\"Forest\",\"Field\",\"Forest\",\"Field\",\"Forest\",\"Forest\",\"Field\",\"Forest\",\"Field\",\"Forest\",\"Forest\",\"Forest\",\"Field\",\"Forest\",\"Forest\",\"Field\",\"Field\",\"Forest\",\"Forest\",\"Field\",\"Forest\",\"Field\",\"Forest\",\"Forest\",\"Field\",\"Field\",\"Forest\",\"Forest\",\"Field\",\"Forest\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>road<\\/th>\\n      <th>pen<\\/th>\\n      <th>habitat<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":10,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"road\",\"targets\":1},{\"name\":\"pen\",\"targets\":2},{\"name\":\"habitat\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n## Dataset three (and beyond): Survey-level covariates\n\nEach **survey covariate** needs its own Excel file. These files are structured like your detection history:\n\n- Rows are sites  \n- Columns are surveys\n\nThis setup allows each covariate to vary by site and by survey, which is essential when fitting more realistic detection models.\n\nFor example, you might have a dataset that records average light pollution on each survey:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  \"1\" = rnorm(50, 0, 1),\n  \"2\" = rnorm(50, 1, 2),\n  \"3\" = rnorm(50, -1, 1),\n  check.names = FALSE\n)\n\ndatatable(df, options = list(pageLength = 10))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-75c7fe0db3d78887d01f\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-75c7fe0db3d78887d01f\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\"],[0.2293655012004598,0.2562649354003344,2.210148507202776,0.4784911138833739,0.5087513285936826,-1.245646532280894,-0.3067552782313552,-1.723762898987013,-0.7598762784723017,-0.1381806971399123,-0.2840862633064474,0.2800222889848699,-1.37736481952349,-0.5775563038359111,0.6589854103832662,0.3081195275506381,1.185036895733731,1.387952627149431,-0.5760394268892862,-0.8727836192198231,1.160528058377827,-1.816533693564834,0.9359386978044987,-0.2304174365356287,-1.657102435730096,-0.1676173987294588,-0.3100759904495194,-0.768983667289694,1.538887818782219,-1.852343830617509,-1.199469594661844,0.235699141474781,0.5867329233699112,0.1957465438443483,0.788648351587648,-0.8920737262604063,0.2655212805099271,-0.2703962195365305,-0.6181205691033658,-0.4240738466643515,-0.2228367254222793,-0.2525944220556619,1.001196165349516,-1.004756590779265,0.7664882871283322,0.2715543397240473,0.654420890965258,-0.3128823269134357,-0.7966485493832036,-1.965402894447587],[2.689520335617337,3.373445050680552,-2.259229936568228,1.466762624378569,0.3471266331250371,0.7735652275666967,-0.2590769596933531,-0.9554017258154965,1.866602622480088,0.4882489635900076,2.234815034721655,0.9858194731162307,-0.7207348352957601,2.606032076927535,0.09895123845243714,-0.3539615283026643,0.05050832560432716,-1.639431260891807,-1.509550604945179,1.667570910792038,0.3478299196648297,1.02065143340677,1.470299672513831,-0.07787235680317761,3.546348301452596,-0.378239719111148,1.251073953424307,0.7533518426303603,2.252763785806368,0.9551311847576159,-2.228838811088905,0.8543237926456472,-1.285284543946215,-2.749243765535602,0.009626973198144761,-3.214255777836883,1.620925269982636,3.221323877450984,-2.102657330655428,-1.623227671565014,0.5889703197112496,3.992919725674034,-1.519005900153489,0.07919595555984926,2.909539802048921,-0.3660431913874944,3.099591449833732,1.649378999571582,0.8055752159222866,-0.08890084391110875],[0.1999422975136491,-1.658484277742144,-0.4121695391491023,-0.8330429415593303,-1.811531577526425,-1.211851092326426,-0.9380926945255909,-0.3314929825500275,-1.840392999472996,0.9677114737202384,-0.8811824892072183,0.8295583221627918,1.716168105804098,-4.260452567681076,-1.633760829100741,-2.11699956353783,-1.136865066589407,-1.232283193402298,-2.425627697002127,-1.749821693173311,-1.250246855476306,0.2012993231158682,-1.023704044901491,-2.245136301240478,-2.433803974163912,-0.9654371481078597,-1.898384944183613,-0.8152507435768203,0.1236037826585847,0.2556086229303307,0.6809953394557005,0.1649316309489064,-1.142974180416556,-1.299033748624452,-2.03753083911366,-2.72968188495069,-2.355354180823692,-1.506959784612026,-1.517208809324141,-1.020464544207848,-2.288722703543259,-1.574133557315073,-1.281616732822917,-0.5784287427706326,0.1022524284002715,-0.2282021927341882,-0.5543339446021155,-0.5189931822167965,-0.3319943011806417,-1.572968479445394]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>1<\\/th>\\n      <th>2<\\/th>\\n      <th>3<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":10,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"1\",\"targets\":1},{\"name\":\"2\",\"targets\":2},{\"name\":\"3\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nBut if you were also collecting data on if a field was being ploughed or not you may have:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  \"1\" = sample(size = 50, x = c(\"Plough\", \"No plough\"), prob = c(0.5, 0.5), replace = TRUE), \n  \"2\" = sample(size = 50, x = c(\"Plough\", \"No plough\"), prob = c(0.1, 0.9), replace = TRUE), \n  \"3\" = sample(size = 50, x = c(\"Plough\", \"No plough\"), prob = c(0.8, 0.2), replace = TRUE), \n  check.names = FALSE\n)\n\ndatatable(df, options = list(pageLength = 10))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-5c0a65429d1e77b784fb\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-5c0a65429d1e77b784fb\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\"],[\"Plough\",\"No plough\",\"No plough\",\"No plough\",\"Plough\",\"No plough\",\"Plough\",\"No plough\",\"No plough\",\"No plough\",\"Plough\",\"No plough\",\"Plough\",\"No plough\",\"No plough\",\"No plough\",\"Plough\",\"No plough\",\"Plough\",\"No plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"No plough\",\"No plough\",\"No plough\",\"Plough\",\"Plough\",\"No plough\",\"Plough\",\"Plough\",\"No plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"No plough\",\"No plough\",\"Plough\",\"No plough\",\"No plough\",\"No plough\",\"Plough\",\"No plough\",\"Plough\",\"No plough\"],[\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"Plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"No plough\",\"Plough\",\"No plough\",\"No plough\",\"No plough\",\"Plough\",\"No plough\",\"Plough\",\"No plough\",\"Plough\",\"No plough\",\"Plough\",\"No plough\",\"Plough\",\"No plough\",\"Plough\",\"No plough\",\"Plough\",\"No plough\",\"No plough\",\"Plough\"],[\"Plough\",\"Plough\",\"No plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"No plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"No plough\",\"Plough\",\"Plough\",\"Plough\",\"No plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"No plough\",\"Plough\",\"Plough\",\"No plough\",\"No plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"No plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"Plough\",\"No plough\",\"Plough\",\"Plough\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>1<\\/th>\\n      <th>2<\\/th>\\n      <th>3<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":10,\"columnDefs\":[{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"1\",\"targets\":1},{\"name\":\"2\",\"targets\":2},{\"name\":\"3\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n# What next?\n\nHopefully this page gave you a clearer understanding of the theory, how to implement occupancy models in practice, and how to collect and store your data correctly.\n\nOn the next page, we’ll begin thinking about *Bayesian* statistics.\n\nBut before that, take a break. Go for a walk, close the laptop, and come back in a day or two. When you're ready, we’ll dive into how the Bayesian framework works, and why it underpins everything we've done so far.\n\n# Lecture recording\n\nUnlike on the previous page, I don't have a lecture recording a a single-season occupancy model that includes covariates. The lecture below does include covariates, but for models when you have multiple seasons. So a lot of the lecture won't be directly related to your thesis, other than where I talk about how to include covariates. Sorry for that!\n\n<iframe src=\"https://abdn.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=5cfbf4bd-b968-42ad-bd26-acb7010aa806\" width=\"720\" height=\"405\" allowfullscreen></iframe>\n",
    "supporting": [
      "OccMods_WithCovariates_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}