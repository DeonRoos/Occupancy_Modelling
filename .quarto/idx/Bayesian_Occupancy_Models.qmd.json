{"title":"Bayesian Algorithms","markdown":{"yaml":{"title":"Bayesian Algorithms","author":"Deon Roos","date":"`r Sys.Date()`","format":{"html":{"theme":"flatly","highlight-style":"monochrome","code-fold":true,"toc":true,"toc-depth":2,"toc-location":"right"}}},"headingText":"How do we estimate a posterior?","containsRefs":false,"markdown":"\n\nIn the previous page, we went through the underlying theory of Bayesian statistics; how our prior knowledge is updated using real data through Bayesâ€™ Theorem. Now, we're going to move into the practical application of these ideas using the `spOccupancy` package. My goal here is to help you understand how Bayesian occupancy models are fit, how to monitor convergence, and how to interpret uncertainty through credible intervals.\n\nWe'll again work with the Etosha elephant dataset. Importantly, we are not yet including spatial autocorrelation. We'll add that in the next section.\n\n```{r}\nlibrary(spOccupancy)\n```\n\n```{r, include=FALSE}\nset.seed(1234)\ndat <- simOcc(J.x = 8, \n              J.y = 8, \n              n.rep = rep(3, times = 8 * 8), \n              beta = c(1, -0.2, 0.3), \n              alpha = c(-2, 0.5))\nobs <- dat$y\ntemp <- dat$X[,2]\ntree <- dat$X[,3]\ndet_cov <- dat$X.p[,,2]\n\ndet.covs <- list(rain = dat$X.p[,,2])\nocc.covs <- data.frame(tree = tree, temp = temp)\netosha <- list(\n  y = dat$y,\n  det.covs = det.covs,\n  occ.covs = occ.covs\n)\n```\n\n\nIn the previous page we spoke about posteriors and how these are a combination of our prior belief and our data. But how does that *actually* happen? Well, the answer is pretty simple but took hundreds of years for statisticians to figure out. Markov Chain Monte Carlo is an algorithm that was developed by scientists at Los Alamos in the 1950s working on the Manhattan Project (yes *that* Manhattan Project). The algorithm is called Markov Chain Monte Carlo (or MCMC) for two reasons. A Markov Chain describes a sequence of states, where the probability to move from one state to the next state depends only on what the current state is.\n\nFor example, imagine you are walking through a series of rooms. Where you go next depends only on the room you're currently in. You can't instantly teleport to the other side of the building! Nor does it depend on the path you have taken to get to your current room.\n\n# What does MCMC look like?\n\nBelow is an animation of a simple MCMC algorithm to help give an intuition for what's happening behind the scenes.\n\nFor this, we have the following simple linear model:\n\n$$y_i \\sim Normal(\\mu_i, \\sigma^2)$$\n\n$$\\mu_i = \\beta_0 + \\beta_1 \\times x_i $$\n\nSo our objective here is to figure out $\\beta_0$ and $\\beta_1$. To do so, we'll set up an MCMC using one \"chain\". A chain is a Markov Chain - it's the black dot and orange line you can see in the animation below. This chain is trying to find the \"True value\" location marked with a teal X. At each step the black dot asks \"if I take a step in a random direction, will I be closer to X or further away?\". If it's closer, then it takes the step. If it's further away, then it's *less* likely to take the step but it's not impossible. This seems like a bad choice. Why move somewhere if it's further away from X? The answer is a bit nuanced, but the concise explanation is that sometimes there might be areas of the \"parameter space\" (the parameter space is all possible values of $\\beta_0$ and $\\beta_1$) which \"work\" quite well despite not being the true value. If we didn't have the behaviour, where the chain might take a step even though it's worse, then we might get stuck in one of these \"bad\" areas (technically, these \"bad\" areas are called \"local minima\").\n\nHere's our MCMC in action:\n\n```{r, message = FALSE, warning = FALSE}\nlibrary(tidyverse)\nlibrary(gganimate)\nlibrary(ggthemes)\n\ntrue_param <- c(2, -1)\ntarget_density <- function(x, y) {\n  exp(-0.5 * ((x - true_param[1])^2 / 1^2 + (y - true_param[2])^2 / 0.5^2))\n}\n\nset.seed(123)\nn_iter <- 100\nx <- y <- 0\nsamples <- tibble(x = x, y = y, iteration = 1)\n\nfor (i in 2:n_iter) {\n  x_prop <- rnorm(1, x, 0.4)\n  y_prop <- rnorm(1, y, 0.4)\n  accept_ratio <- target_density(x_prop, y_prop) / target_density(x, y)\n  \n  if (runif(1) < accept_ratio) {\n    x <- x_prop\n    y <- y_prop\n  }\n  samples <- samples |> add_row(x = x, y = y, iteration = i)\n}\n\nggplot(samples, aes(x = x, y = y)) +\n  geom_path(color = \"#FF5733\", linewidth = 0.7) +\n  geom_point(aes(x = x, y = y), color = \"black\", size = 2) +\n  geom_point(aes(x = true_param[1], y = true_param[2]), \n             color = \"#00A68A\", size = 3, shape = 4, stroke = 2) +\n  annotate(\"text\", x = true_param[1] + 0.1, y = true_param[2],\n           label = \"True value\", color = \"#00A68A\", hjust = 0) +\n  transition_reveal(iteration) +\n  coord_fixed() +\n  labs(\n    title = \"MCMC Chain Step: {frame_along}\",\n    x = bquote(beta[0]),\n    y = bquote(beta[1])\n  ) +\n  theme_bw()\n```\n\nHere's where the really clever bit comes in. At each iteration, if we record the parameter value it tried, and store it, when we build it up the end result is our *posterior*! This is what made Bayesian statistics possible! We don't need to use any crazy (and often impossible) maths to figure out the posterior, we just have MCMC walk around and the end result is an insanely good reflection of the posterior!\n\n```{r, message = FALSE, warning = FALSE}\nlibrary(tidyverse)\n\nsamples_long <- samples |>\n  pivot_longer(cols = c(x, y), names_to = \"parameter\", values_to = \"value\")\n\nsamples_long <- samples_long |>\n  mutate(true_value = if_else(parameter == \"x\", true_param[1], true_param[2]))\n\nsamples_long_cumulative <- samples_long |>\n  group_by(parameter) |>\n  group_split() |>\n  map_dfr(function(df) {\n    param <- unique(df$parameter)\n    map_dfr(1:max(df$iteration), function(i) {\n      df |>\n        filter(iteration <= i) |>\n        mutate(frame = i, parameter = param)\n    })\n  })\n\nsamples_long_cumulative <- samples_long_cumulative %>%\n  mutate(parameter_label = case_when(\n    parameter == \"x\" ~ \"beta[0]\",\n    parameter == \"y\" ~ \"beta[1]\"\n  ))\n\nggplot(samples_long_cumulative, aes(x = value)) +\n  geom_histogram(binwidth = 0.4, fill = \"#FF5733\", color = \"white\", boundary = 0) +\n  geom_vline(aes(xintercept = true_value), linetype = \"dashed\", color = \"#00A68A\", linewidth = 1) +\n  facet_wrap(~parameter_label, scales = \"free_x\", ncol = 1, labeller = label_parsed) +\n  transition_manual(frame) +\n  labs(title = \"Cumulative Posterior up to Iteration {current_frame}\",\n       x = \"Parameter Value\", y = \"Frequency\") +\n  theme_bw()\n```\n\nAnother way to show what the MCMC was up to is using something called \"traceplots\". These are relatively simple but actually quite powerful for determining if we *trust* the model output. We'll come back to this in a bit, but for now, we can show the MCMC exploring the parameter space using these traceplots.\n\n```{r, message = FALSE, warning = FALSE}\nsamples_long_cumulative_trace <- samples_long |>\n  group_by(parameter) |>\n  group_split() |>\n  map_dfr(function(df) {\n    param <- unique(df$parameter)\n    map_dfr(1:max(df$iteration), function(i) {\n      df |>\n        filter(iteration <= i) |>\n        mutate(frame = i, parameter = param)\n    })\n  })\n\nsamples_long_cumulative_trace <- samples_long_cumulative_trace %>%\n  mutate(parameter_label = case_when(\n    parameter == \"x\" ~ \"beta[0]\",\n    parameter == \"y\" ~ \"beta[1]\"\n  ))\n\nggplot(samples_long_cumulative_trace, aes(x = iteration, y = value)) +\n  geom_line(color = \"#FF5733\", linewidth = 0.8) +\n  geom_hline(aes(yintercept = true_value), linetype = \"dashed\", color = \"#00A68A\", linewidth = 1) +\n  facet_wrap(~parameter_label, scales = \"free_x\", ncol = 1, labeller = label_parsed) +\n  transition_manual(frame) +\n  labs(title = \"Traceplot up to Iteration {current_frame}\",\n       x = \"Iteration\", y = \"Parameter Value\") +\n  theme_bw()\n\n```\n\n# Improving our MCMC\n\nWe've made a good start but we can improve this quite a bit. Firstly, limiting the algorithm to 100 iterations doesn't give it many opportunities to find the true value. In general, you often give MCMC thousands of iterations, rather than a paltry 100. So first improvement is to increase the number of iterations (you may remember we did this when we were going through the occupancy theory pages - now you know why!).\n\nSecondly, we're using one MCMC chain. Why not more? Afterall, if we have say four chains, then if all four agree that they're close to the true value that would give us more comfort. If they find different \"True values\", well, then it seems likely that we haven't actually found it.\n\nLet's implement our improvement and see what our plots now look like:\n\n```{r, message = FALSE, warning = FALSE}\nlibrary(tidyverse)\nlibrary(gganimate)\n\ntrue_param <- c(2, -1)\n\ntarget_density <- function(x, y) {\n  exp(-0.5 * ((x - true_param[1])^2 / 1^2 + (y - true_param[2])^2 / 0.5^2))\n}\n\nset.seed(123)\nn_iter <- 1000\nn_chains <- 4\n\nchains_list <- map_dfr(1:n_chains, function(chain_id) {\n  x <- y <- 0  # Start at (0, 0)\n  samples <- tibble(x = x, y = y, iteration = 1, chain = chain_id)\n  \n  for (i in 2:n_iter) {\n    x_prop <- rnorm(1, x, 0.4)\n    y_prop <- rnorm(1, y, 0.4)\n    accept_ratio <- target_density(x_prop, y_prop) / target_density(x, y)\n    \n    if (runif(1) < accept_ratio) {\n      x <- x_prop\n      y <- y_prop\n    }\n    \n    samples <- samples %>% add_row(x = x, y = y, iteration = i, chain = chain_id)\n  }\n  samples\n})\n```\n\n```{r, message = FALSE, warning = FALSE}\nggplot(chains_list, aes(x = x, y = y, group = chain, color = as.factor(chain))) +\n  geom_path(linewidth = 0.7) +\n  geom_point(aes(x = x, y = y), size = 1.5) +\n  geom_point(aes(x = true_param[1], y = true_param[2]), \n             color = \"white\", size = 4, shape = 4, stroke = 2, inherit.aes = FALSE) +\n  annotate(\"text\", x = true_param[1] + 0.1, y = true_param[2],\n           label = \"True value\", color = \"white\", hjust = 0) +\n  transition_reveal(along = iteration) +\n  coord_fixed() +\n  scale_color_brewer(palette = \"Set1\", name = \"Chain\") +\n  labs(title = \"MCMC Chains Step: {round(frame_along, digits = 0)}\",\n    x = bquote(beta[0]),\n    y = bquote(beta[1])) +\n  theme_bw()\n```\n\n```{r, message = FALSE, warning = FALSE}\nsamples_long <- chains_list %>%\n  pivot_longer(cols = c(x, y), names_to = \"parameter\", values_to = \"value\") %>%\n  mutate(true_value = if_else(parameter == \"x\", true_param[1], true_param[2]),\n         parameter_label = case_when(\n           parameter == \"x\" ~ \"beta[0]\",\n           parameter == \"y\" ~ \"beta[1]\"\n         ))\n\n# Build cumulative data\nsamples_long_cumulative <- samples_long %>%\n  group_by(parameter, chain) %>%\n  group_split() %>%\n  map_dfr(function(df) {\n    param <- unique(df$parameter)\n    chain_id <- unique(df$chain)\n    map_dfr(1:max(df$iteration), function(i) {\n      df %>%\n        filter(iteration <= i) %>%\n        mutate(frame = i, parameter = param, chain = chain_id)\n    })\n  })\n\nggplot(samples_long_cumulative, aes(x = value, fill = as.factor(chain))) +\n  geom_histogram(binwidth = 0.4, color = \"white\", boundary = 0, \n                 position = position_dodge(), alpha = 0.6) +\n  geom_vline(aes(xintercept = true_value), linetype = \"dashed\", color = \"#00A68A\", linewidth = 1) +\n  facet_wrap(~parameter_label, scales = \"free_x\", labeller = label_parsed, ncol = 1) +\n  transition_manual(frame) +\n  scale_fill_brewer(palette = \"Set1\", name = \"Chain\") +\n  labs(title = \"Cumulative Posterior up to Iteration {current_frame}\",\n       x = \"Parameter Value\", y = \"Frequency\") +\n  theme_minimal()\n```\n\n```{r, message = FALSE, warning = FALSE}\nggplot(samples_long_cumulative, aes(x = iteration, y = value, color = as.factor(chain))) +\n  geom_line(linewidth = 0.7) +\n  geom_hline(aes(yintercept = true_value), linetype = \"dashed\", color = \"#00A68A\", linewidth = 1) +\n  facet_wrap(~parameter_label, scales = \"free_y\", labeller = label_parsed, ncol = 1) +\n  transition_manual(frame) +\n  scale_color_brewer(palette = \"Set1\", name = \"Chain\") +\n  labs(title = \"Traceplot up to Iteration {current_frame}\",\n       x = \"Iteration\", y = \"Parameter Value\") +\n  theme_minimal()\n```\n\nI have a bit more confidence in our posteriors now:\n\n- All chains seem to agree on the same value (they have \"converged\" to the same answer)\n\n- The posteriors look reasonably well estimated (they'll close to the true value - but keep in mind that with real analysis we don't know what the truth is)\n\n- The traceplots resemble \"hairy caterpillars\", which matches the Markov Chain idea that the next value depends only on the current value (it doesn't \"remember\" older values).\n\nThe final thing I want to bring your attention to are the first hundred or so iterations. Generally, these iterations can be pretty wild, fluctuating massively. If you think about it, that's kind of fair enough. We're starting each MCMC chain at random locations, so it's fair if things are a bit **wobbly** at the start. So what we do with these early iterations is to simply ignore them. These are called \"burn in\" iterations, as in, we're letting the engine warm up, so these are just used to get up to speed. Mostly arbitrarily, we typically ignore the first 10% of iterations, so where we've used 1000 iterations, we'd generally ignore the first 100.\n\n# Fitting the occupancy model using MCMC\n\nLet's now revisit our Bayesian model. As a reminder, here's what it looked like:\n\n$$z_i \\sim Bernoulli(\\psi_i)\\\\$$\n\n$$logit(\\psi_i) = \\beta_0 + \\beta_1 \\times Tree_i + \\beta_2 \\times Temp_i\\\\$$\n\n$$y_{i,j} \\sim Bernoulli(p_{i,j} \\times z_i)\\\\$$\n\n$$logit(p_{i,j}) = \\alpha_0 + \\alpha_1 \\times Rain_{i,j}$$\n\nWhich we can translate into the following code. But pay attention to the `n.chains`, `n.samples` and `n.burn` arguments. This is where we specify how many chains we want (`n.chains`), how many iterations we want (`n.samples`, note an iteration can also be called a sample), and how many of the first iterations we want to ignore (`n.burn`).\n\n```{r, message = FALSE, warning = FALSE}\nfit <- PGOcc(\n  occ.formula = ~ tree + temp, \n  det.formula = ~ rain, \n  data = etosha, \n  \n  n.chains = 4,     # 4 chains just like in our simple example\n  n.samples = 2000, # 2000 iterations for each chain\n  n.burn = 200,     # We ignore the first 200 iterations to give MCMC a chance to get it's feet\n  \n  verbose = FALSE   # This just says don't spit out details while fitting \n  # (normally I would leave verbose = TRUE so I can keep track of the model while it's fitting)\n  )\n```\n\nWe can now check how our model worked. The code is pretty simple. The only tricky thing is to specify if you want `beta` or `alpha`. Importantly, `beta` here refers to the occupancy parameters, and `alpha` refers to the detection parameters.\n\nSo here are the traceplots and posteriors for $\\beta_0$, $\\beta_1$ and $\\beta_2$ in:\n\n$$logit(\\psi_i) = \\beta_0 + \\beta_1 \\times Tree_i + \\beta_2 \\times Temp_i\\\\$$\n\n```{r, message = FALSE, warning = FALSE}\nplot(fit, 'beta') # Occupancy parameters.\n```\n\nAnd here are the traceplots and posteriors for $\\alpha_0$ and $\\alpha_1$ in:\n\n$$logit(p_{i,j}) = \\alpha_0 + \\alpha_1 \\times Rain_{i,j}$$\n\n```{r, message = FALSE, warning = FALSE}\nplot(fit, 'alpha') # Detection parameters.\n```\n\nAnd we can also get a more numeric summary of the model using `summary()`. Importantly, the information you see below is the same as the data in the figures above. It's just summarised! So the `Mean` is just the mean of the posteriors above!\n\n```{r, message = FALSE, warning = FALSE}\nsummary(fit)\n```\n\n# Credible intervals\n\nNotice the 2.5% and 97.5% in the tables above? These are the credible intervals that I briefly mentioned in the Occupancy Models: Covariates page. Technically, these are just the quantiles of the posterior. Or, phrased alternatively, 95% of all iterations are within this interval. And keep in mind, that a Bayesian credible interval is not the same as a frequentist confidence interval. For our purposes, these intervals represent a 95% probability to contain the true value (based on the data we collected and the model we fit)!\n\n```{r, message = FALSE, warning = FALSE}\nbeta_0_samples <- fit$beta.samples[,1]\n\nbeta_0_df <- tibble(beta_0 = beta_0_samples)\n\nsummary_stats <- beta_0_df %>%\n  summarise(\n    mean = mean(beta_0),\n    median = median(beta_0),\n    lower = quantile(beta_0, 0.025),\n    upper = quantile(beta_0, 0.975)\n  )\n\nggplot(beta_0_df, aes(x = beta_0)) +\n  geom_histogram(fill = \"#00A68A\", colour = \"white\", alpha = 0.5, bins = 50) +\n  \n  # Vertical lines\n  geom_vline(xintercept = summary_stats$mean, linetype = \"solid\", color = \"black\", linewidth = 1) +\n  geom_vline(xintercept = summary_stats$median, linetype = \"dashed\", color = \"black\", linewidth = 1) +\n  geom_vline(xintercept = summary_stats$lower, linetype = \"dotted\", color = \"black\", linewidth = 1) +\n  geom_vline(xintercept = summary_stats$upper, linetype = \"dotted\", color = \"black\", linewidth = 1) +\n\n  # curved arrows\n  geom_curve(aes(x = summary_stats$mean + 0.5, y = 400, \n                 xend = summary_stats$mean, yend = 350), \n             arrow = arrow(length = unit(0.02, \"npc\")), curvature = 0.3, color = \"black\") +\n  geom_curve(aes(x = summary_stats$median - 0.5, y = 300, \n                 xend = summary_stats$median, yend = 250), \n             arrow = arrow(length = unit(0.02, \"npc\")), curvature = -0.3, color = \"black\") +\n  geom_curve(aes(x = summary_stats$lower - 0.5, y = 100, \n                 xend = summary_stats$lower, yend = 75), \n             arrow = arrow(length = unit(0.02, \"npc\")), curvature = -0.3, color = \"black\") +\n  geom_curve(aes(x = summary_stats$upper + 0.5, y = 100, \n                 xend = summary_stats$upper, yend = 75), \n             arrow = arrow(length = unit(0.02, \"npc\")), curvature = 0.3, color = \"black\") +\n\n  annotate(\"text\", x = summary_stats$mean + 0.5, y = 400, label = \"Mean\", hjust = 0, size = 5) +\n  annotate(\"text\", x = summary_stats$median - 0.5, y = 300, label = \"Median\", hjust = 1, size = 5) +\n  annotate(\"text\", x = summary_stats$lower - 0.5, y = 100, label = \"2.5% CI\", hjust = 1, size = 5) +\n  annotate(\"text\", x = summary_stats$upper + 0.5, y = 100, label = \"97.5% CI\", hjust = 0, size = 5) +\n\n  labs(\n    x = expression(paste(beta[0], \" or '(Intercept)'\")),\n    y = \"Frequency\"\n  ) +\n  theme_minimal()\n```\n\nFrom our summary table, the mean for the $\\beta_0$ or `(Intercept)` posterior was estimated as 2.0536, the median (called `50%` in the summary table) was 1.9727, and the 95% credible intervals were 0.1991 and 4.2706, just like we see in the figure.\n\nThis might seem trivial but having credible intervals be so simple, and the interpretation having a useful meaning is one of the big selling points of Bayesian analysis in my mind. It's not something to trivialise.\n\n# Specifying priors\n\nSo far, we've let the `spOccupancy` package handle setting the priors for us behind the scenes. But we can actually specify our own priors if we want to.\n\nIn the background, `spOccupancy` uses something called PÃ³lya-Gamma data augmentation, and under the hood, this method assumes $Normal$ priors for both the occupancy and detection parameters (including their intercepts).\n\nIf you don't specify anything, spOccupancy will set:\n\n- The \"hypermean\" (mean of $Normal$ distribution for all priors) = 0\n\n- The \"hypervariance\" (variance $Normal$ distribution for all priors) = 2.72\n\nThis corresponds to a relatively flat prior on the probability scale (the 0â€“1 scale for occupancy or detection probabilities). In other words, by default, the prior doesn't strongly pull your estimates toward any particular value; it lets the data mostly speak for itself.\n\nBut we can set these explicitly if we want to! Here's what that looks like:\n\n```{r}\n# Specify priors for detection (alpha) and occupancy (beta)\npriors <- list(\n  alpha.normal = list(mean = 0, var = 2.72),  # Detection priors\n  beta.normal = list(mean = 0, var = 2.72)    # Occupancy priors\n)\n```\n\nThe above code is basically doing what `spOccupancy` does by default. All priors will get $Normal(0,2.72)$ in both the detection and occupancy sub models. We can either give a single number (like 0 and 2.72 above), and it will apply to all parameters, or you can give a vector if you want different priors for different parameters.\n\nHere's how we'd give different priors for each parameter:\n\n```{r}\n# Different priors for each occupancy parameter\noccurrence_priors <- list(\n  mean = c(0, 0.5, -0.5),    # One mean for each occupancy parameter\n  var = c(2.72, 1, 2)        # One variance for each occupancy parameter\n)\n\n# Different priors for each detection parameter\ndetection_priors <- list(\n  mean = c(0, 0.2),          # One mean for each detection parameter\n  var = c(0.5, 1)           # One variance for each detection parameter\n)\n\n# Combine into the priors list\npriors <- list(\n  beta.normal = occurrence_priors,\n  alpha.normal = detection_priors\n)\n\n```\n\nThis would translate into this model:\n\n$$z_i \\sim Bernoulli(\\psi_i)\\\\$$\n\n$$logit(\\psi_i) = \\beta_0 + \\beta_1 \\times Tree_i + \\beta_2 \\times Temp_i\\\\$$\n\n$$\\beta_0 \\sim Normal(0, 2.72)$$\n\n$$\\beta_1 \\sim Normal(0.5, 1)$$\n\n$$\\beta_2 \\sim Normal(-0.5, 2)$$\n\n$$y_{i,j} \\sim Bernoulli(p_{i,j} \\times z_i)\\\\$$\n\n$$logit(p_{i,j}) = \\alpha_0 + \\alpha_1 \\times Rain_{i,j}$$\n\n$$\\alpha_0 \\sim Normal(0, 0.5)$$\n\n$$\\alpha_1 \\sim Normal(0.2, 1)$$\n\nNow, to be very, very clear; I am choosing these priors completely at random just for demonstration. I have no reason, in this case, to think that a reasonable prior for $\\beta_1$ is $Normal(0.5, 1)$.\n\nBut we can always fit this model to see what happens:\n\n```{r, message = FALSE, warning = FALSE}\nfit_priors <- PGOcc(\n  occ.formula = ~ tree + temp,\n  det.formula = ~ rain,\n  data = etosha,\n  priors = priors,     # We add our priors here\n  n.chains = 4,\n  n.samples = 2000,\n  n.burn = 200,\n  verbose = FALSE\n)\n```\n\nHaving fit, we can see what the posteriors look like:\n\n```{r, message = FALSE, warning = FALSE}\nplot(fit_priors, 'beta') # Occupancy parameters.\nplot(fit_priors, 'alpha') # Detection parameters.\n```\n\nAnd pull up the summary:\n\n```{r, message = FALSE, warning = FALSE}\nsummary(fit_priors)\n```\n\nIf we compare this with the original model, where we left the priors at their defaults we can see that different priors can lead to different posteriors. Keep in mind how Bayesian statistics work - the posterior is a combination of our data and prior beliefs. We've changed our prior belief and our posteriors have changed as a result.\n\nNow in this case, the difference in posteriors are pretty minimal. It might not always be. And in truth, we would want to think a bit more carefully about the priors. Don't be fooled here. Just because my randomly chosen priors are different from the default ones doesn't mean the default model is necessarily better. The best option is to choose priors you think are reasonable. If you have different prior beliefs (e.g. I have some informative priors but also some uninformative priors) I can run the model with both, and see how much of a difference it makes. This is something called \"prior sensitivity analysis\" and is a fairly useful tool to have in your back pocket when you're not sure about your priors.\n\n```{r, message = FALSE, warning = FALSE}\nsummary(fit)\n```\n\n# Fin\n\nWith that, you should be good to run a Bayesian occupancy model. Something you can add to your CV and have employers fawn over you. Even better if you understand it, so that when they ask you about it you can have a conversation!\n\nThe only part left in the analysis is including \"spatial autocorrelation\". We'll cover that in the next page.\n\n# A subtle point: Priors and the link function\n\nWhen we choose priors in a Bayesian model, it's really important to remember what scale those priors live on.\n\nIn our occupancy model, we specify priors for the parameters on the logit scale, not directly on the probability (0â€“1) scale.\n\nFor example, if we write:\n\n$$logit(p_i) = \\beta_0 + \\beta_1 \\times x_i$$\n\nthen $\\beta_0$ and $\\beta_1$ are in logit space.\n\nRemember, the logit function stretches the 0â€“1 probability scale onto the whole real line:\n\n- Probabilities near 0.5 correspond to logits near 0.\n\n- Probabilities near 0 or 1 correspond to logits of -$\\inf$ and +âˆž.\n\nThis means that a $Normal$ prior with mean 0 and large variance on the logit scale is not flat on the probability scale! Even \"uninformative\" $Normal$ priors on the logit scale can actually imply very strong beliefs on the probability scale.\n\nTo build some intuition, we'll do a little prior predictive simulation:\n\n- We'll randomly draw values for $\\beta_0$ and $\\beta_1$ from a $Normal(0, 2.72)$ prior.\n\n- We'll simulate the relationship between $x$ and $p(x)$ by plugging those $\\beta_0$ and $\\beta_1$ values into the logit equation.\n\n- We'll repeat this 100 times to show many possible relationships.\n\n```{r}\nset.seed(123)\n\nn_draws <- 100\nx_seq <- seq(-3, 3, length.out = 100)\n\nbeta_0_draws <- rnorm(n_draws, mean = 0, sd = sqrt(2.72))\nbeta_1_draws <- rnorm(n_draws, mean = 0, sd = sqrt(2.72))\n\nprior_simulations <- map2_dfr(\n  beta_0_draws, beta_1_draws,\n  .f = function(b0, b1) {\n    tibble(\n      x = x_seq,\n      logit_p = b0 + b1 * x,\n      p = plogis(logit_p)\n    )\n  },\n  .id = \"draw\"\n)\n# Plot\nggplot(prior_simulations, aes(x = x, y = p, group = draw)) +\n  geom_line(alpha = 0.2, color = \"#FF5733\") +\n  theme_minimal() +\n  labs(\n    title = \"Prior Predictive Simulation\",\n    x = \"Covariate (x)\",\n    y = \"Probability (p)\"\n  )\n```\n\nEach orange line is a possible relationship between $x$ and $p(x)$ given the priors we chose. Notice that some lines are almost flat at 0 or 1? While others are very steep, flipping from 0 to 1 over a narrow range of $x$? Even though the prior on $\\beta_0$ and $\\beta_1$ was centered at 0 with large variance, the resulting priors on $p$ are not uniform or \"neutral.\"\n\nIf I were being hyper cautious, I might be worried these priors are pushing the model towards the extreme flipping behaviour. In some cases that might be good, in others it might be bad.\n\nThe broader points I am making here are:\n\n- Don't stress too much about priors. If you have a lot of data your prior will often not be terribly important.\n\n- But give a little thought as to what a sensible prior would be, especially when working with link functions.\n\nIf you're in doubt speak with me! I think having a discussion about your priors would be an excellent use of one of our meetings (hint, hint).","srcMarkdownNoYaml":"\n\nIn the previous page, we went through the underlying theory of Bayesian statistics; how our prior knowledge is updated using real data through Bayesâ€™ Theorem. Now, we're going to move into the practical application of these ideas using the `spOccupancy` package. My goal here is to help you understand how Bayesian occupancy models are fit, how to monitor convergence, and how to interpret uncertainty through credible intervals.\n\nWe'll again work with the Etosha elephant dataset. Importantly, we are not yet including spatial autocorrelation. We'll add that in the next section.\n\n```{r}\nlibrary(spOccupancy)\n```\n\n```{r, include=FALSE}\nset.seed(1234)\ndat <- simOcc(J.x = 8, \n              J.y = 8, \n              n.rep = rep(3, times = 8 * 8), \n              beta = c(1, -0.2, 0.3), \n              alpha = c(-2, 0.5))\nobs <- dat$y\ntemp <- dat$X[,2]\ntree <- dat$X[,3]\ndet_cov <- dat$X.p[,,2]\n\ndet.covs <- list(rain = dat$X.p[,,2])\nocc.covs <- data.frame(tree = tree, temp = temp)\netosha <- list(\n  y = dat$y,\n  det.covs = det.covs,\n  occ.covs = occ.covs\n)\n```\n\n# How do we estimate a posterior?\n\nIn the previous page we spoke about posteriors and how these are a combination of our prior belief and our data. But how does that *actually* happen? Well, the answer is pretty simple but took hundreds of years for statisticians to figure out. Markov Chain Monte Carlo is an algorithm that was developed by scientists at Los Alamos in the 1950s working on the Manhattan Project (yes *that* Manhattan Project). The algorithm is called Markov Chain Monte Carlo (or MCMC) for two reasons. A Markov Chain describes a sequence of states, where the probability to move from one state to the next state depends only on what the current state is.\n\nFor example, imagine you are walking through a series of rooms. Where you go next depends only on the room you're currently in. You can't instantly teleport to the other side of the building! Nor does it depend on the path you have taken to get to your current room.\n\n# What does MCMC look like?\n\nBelow is an animation of a simple MCMC algorithm to help give an intuition for what's happening behind the scenes.\n\nFor this, we have the following simple linear model:\n\n$$y_i \\sim Normal(\\mu_i, \\sigma^2)$$\n\n$$\\mu_i = \\beta_0 + \\beta_1 \\times x_i $$\n\nSo our objective here is to figure out $\\beta_0$ and $\\beta_1$. To do so, we'll set up an MCMC using one \"chain\". A chain is a Markov Chain - it's the black dot and orange line you can see in the animation below. This chain is trying to find the \"True value\" location marked with a teal X. At each step the black dot asks \"if I take a step in a random direction, will I be closer to X or further away?\". If it's closer, then it takes the step. If it's further away, then it's *less* likely to take the step but it's not impossible. This seems like a bad choice. Why move somewhere if it's further away from X? The answer is a bit nuanced, but the concise explanation is that sometimes there might be areas of the \"parameter space\" (the parameter space is all possible values of $\\beta_0$ and $\\beta_1$) which \"work\" quite well despite not being the true value. If we didn't have the behaviour, where the chain might take a step even though it's worse, then we might get stuck in one of these \"bad\" areas (technically, these \"bad\" areas are called \"local minima\").\n\nHere's our MCMC in action:\n\n```{r, message = FALSE, warning = FALSE}\nlibrary(tidyverse)\nlibrary(gganimate)\nlibrary(ggthemes)\n\ntrue_param <- c(2, -1)\ntarget_density <- function(x, y) {\n  exp(-0.5 * ((x - true_param[1])^2 / 1^2 + (y - true_param[2])^2 / 0.5^2))\n}\n\nset.seed(123)\nn_iter <- 100\nx <- y <- 0\nsamples <- tibble(x = x, y = y, iteration = 1)\n\nfor (i in 2:n_iter) {\n  x_prop <- rnorm(1, x, 0.4)\n  y_prop <- rnorm(1, y, 0.4)\n  accept_ratio <- target_density(x_prop, y_prop) / target_density(x, y)\n  \n  if (runif(1) < accept_ratio) {\n    x <- x_prop\n    y <- y_prop\n  }\n  samples <- samples |> add_row(x = x, y = y, iteration = i)\n}\n\nggplot(samples, aes(x = x, y = y)) +\n  geom_path(color = \"#FF5733\", linewidth = 0.7) +\n  geom_point(aes(x = x, y = y), color = \"black\", size = 2) +\n  geom_point(aes(x = true_param[1], y = true_param[2]), \n             color = \"#00A68A\", size = 3, shape = 4, stroke = 2) +\n  annotate(\"text\", x = true_param[1] + 0.1, y = true_param[2],\n           label = \"True value\", color = \"#00A68A\", hjust = 0) +\n  transition_reveal(iteration) +\n  coord_fixed() +\n  labs(\n    title = \"MCMC Chain Step: {frame_along}\",\n    x = bquote(beta[0]),\n    y = bquote(beta[1])\n  ) +\n  theme_bw()\n```\n\nHere's where the really clever bit comes in. At each iteration, if we record the parameter value it tried, and store it, when we build it up the end result is our *posterior*! This is what made Bayesian statistics possible! We don't need to use any crazy (and often impossible) maths to figure out the posterior, we just have MCMC walk around and the end result is an insanely good reflection of the posterior!\n\n```{r, message = FALSE, warning = FALSE}\nlibrary(tidyverse)\n\nsamples_long <- samples |>\n  pivot_longer(cols = c(x, y), names_to = \"parameter\", values_to = \"value\")\n\nsamples_long <- samples_long |>\n  mutate(true_value = if_else(parameter == \"x\", true_param[1], true_param[2]))\n\nsamples_long_cumulative <- samples_long |>\n  group_by(parameter) |>\n  group_split() |>\n  map_dfr(function(df) {\n    param <- unique(df$parameter)\n    map_dfr(1:max(df$iteration), function(i) {\n      df |>\n        filter(iteration <= i) |>\n        mutate(frame = i, parameter = param)\n    })\n  })\n\nsamples_long_cumulative <- samples_long_cumulative %>%\n  mutate(parameter_label = case_when(\n    parameter == \"x\" ~ \"beta[0]\",\n    parameter == \"y\" ~ \"beta[1]\"\n  ))\n\nggplot(samples_long_cumulative, aes(x = value)) +\n  geom_histogram(binwidth = 0.4, fill = \"#FF5733\", color = \"white\", boundary = 0) +\n  geom_vline(aes(xintercept = true_value), linetype = \"dashed\", color = \"#00A68A\", linewidth = 1) +\n  facet_wrap(~parameter_label, scales = \"free_x\", ncol = 1, labeller = label_parsed) +\n  transition_manual(frame) +\n  labs(title = \"Cumulative Posterior up to Iteration {current_frame}\",\n       x = \"Parameter Value\", y = \"Frequency\") +\n  theme_bw()\n```\n\nAnother way to show what the MCMC was up to is using something called \"traceplots\". These are relatively simple but actually quite powerful for determining if we *trust* the model output. We'll come back to this in a bit, but for now, we can show the MCMC exploring the parameter space using these traceplots.\n\n```{r, message = FALSE, warning = FALSE}\nsamples_long_cumulative_trace <- samples_long |>\n  group_by(parameter) |>\n  group_split() |>\n  map_dfr(function(df) {\n    param <- unique(df$parameter)\n    map_dfr(1:max(df$iteration), function(i) {\n      df |>\n        filter(iteration <= i) |>\n        mutate(frame = i, parameter = param)\n    })\n  })\n\nsamples_long_cumulative_trace <- samples_long_cumulative_trace %>%\n  mutate(parameter_label = case_when(\n    parameter == \"x\" ~ \"beta[0]\",\n    parameter == \"y\" ~ \"beta[1]\"\n  ))\n\nggplot(samples_long_cumulative_trace, aes(x = iteration, y = value)) +\n  geom_line(color = \"#FF5733\", linewidth = 0.8) +\n  geom_hline(aes(yintercept = true_value), linetype = \"dashed\", color = \"#00A68A\", linewidth = 1) +\n  facet_wrap(~parameter_label, scales = \"free_x\", ncol = 1, labeller = label_parsed) +\n  transition_manual(frame) +\n  labs(title = \"Traceplot up to Iteration {current_frame}\",\n       x = \"Iteration\", y = \"Parameter Value\") +\n  theme_bw()\n\n```\n\n# Improving our MCMC\n\nWe've made a good start but we can improve this quite a bit. Firstly, limiting the algorithm to 100 iterations doesn't give it many opportunities to find the true value. In general, you often give MCMC thousands of iterations, rather than a paltry 100. So first improvement is to increase the number of iterations (you may remember we did this when we were going through the occupancy theory pages - now you know why!).\n\nSecondly, we're using one MCMC chain. Why not more? Afterall, if we have say four chains, then if all four agree that they're close to the true value that would give us more comfort. If they find different \"True values\", well, then it seems likely that we haven't actually found it.\n\nLet's implement our improvement and see what our plots now look like:\n\n```{r, message = FALSE, warning = FALSE}\nlibrary(tidyverse)\nlibrary(gganimate)\n\ntrue_param <- c(2, -1)\n\ntarget_density <- function(x, y) {\n  exp(-0.5 * ((x - true_param[1])^2 / 1^2 + (y - true_param[2])^2 / 0.5^2))\n}\n\nset.seed(123)\nn_iter <- 1000\nn_chains <- 4\n\nchains_list <- map_dfr(1:n_chains, function(chain_id) {\n  x <- y <- 0  # Start at (0, 0)\n  samples <- tibble(x = x, y = y, iteration = 1, chain = chain_id)\n  \n  for (i in 2:n_iter) {\n    x_prop <- rnorm(1, x, 0.4)\n    y_prop <- rnorm(1, y, 0.4)\n    accept_ratio <- target_density(x_prop, y_prop) / target_density(x, y)\n    \n    if (runif(1) < accept_ratio) {\n      x <- x_prop\n      y <- y_prop\n    }\n    \n    samples <- samples %>% add_row(x = x, y = y, iteration = i, chain = chain_id)\n  }\n  samples\n})\n```\n\n```{r, message = FALSE, warning = FALSE}\nggplot(chains_list, aes(x = x, y = y, group = chain, color = as.factor(chain))) +\n  geom_path(linewidth = 0.7) +\n  geom_point(aes(x = x, y = y), size = 1.5) +\n  geom_point(aes(x = true_param[1], y = true_param[2]), \n             color = \"white\", size = 4, shape = 4, stroke = 2, inherit.aes = FALSE) +\n  annotate(\"text\", x = true_param[1] + 0.1, y = true_param[2],\n           label = \"True value\", color = \"white\", hjust = 0) +\n  transition_reveal(along = iteration) +\n  coord_fixed() +\n  scale_color_brewer(palette = \"Set1\", name = \"Chain\") +\n  labs(title = \"MCMC Chains Step: {round(frame_along, digits = 0)}\",\n    x = bquote(beta[0]),\n    y = bquote(beta[1])) +\n  theme_bw()\n```\n\n```{r, message = FALSE, warning = FALSE}\nsamples_long <- chains_list %>%\n  pivot_longer(cols = c(x, y), names_to = \"parameter\", values_to = \"value\") %>%\n  mutate(true_value = if_else(parameter == \"x\", true_param[1], true_param[2]),\n         parameter_label = case_when(\n           parameter == \"x\" ~ \"beta[0]\",\n           parameter == \"y\" ~ \"beta[1]\"\n         ))\n\n# Build cumulative data\nsamples_long_cumulative <- samples_long %>%\n  group_by(parameter, chain) %>%\n  group_split() %>%\n  map_dfr(function(df) {\n    param <- unique(df$parameter)\n    chain_id <- unique(df$chain)\n    map_dfr(1:max(df$iteration), function(i) {\n      df %>%\n        filter(iteration <= i) %>%\n        mutate(frame = i, parameter = param, chain = chain_id)\n    })\n  })\n\nggplot(samples_long_cumulative, aes(x = value, fill = as.factor(chain))) +\n  geom_histogram(binwidth = 0.4, color = \"white\", boundary = 0, \n                 position = position_dodge(), alpha = 0.6) +\n  geom_vline(aes(xintercept = true_value), linetype = \"dashed\", color = \"#00A68A\", linewidth = 1) +\n  facet_wrap(~parameter_label, scales = \"free_x\", labeller = label_parsed, ncol = 1) +\n  transition_manual(frame) +\n  scale_fill_brewer(palette = \"Set1\", name = \"Chain\") +\n  labs(title = \"Cumulative Posterior up to Iteration {current_frame}\",\n       x = \"Parameter Value\", y = \"Frequency\") +\n  theme_minimal()\n```\n\n```{r, message = FALSE, warning = FALSE}\nggplot(samples_long_cumulative, aes(x = iteration, y = value, color = as.factor(chain))) +\n  geom_line(linewidth = 0.7) +\n  geom_hline(aes(yintercept = true_value), linetype = \"dashed\", color = \"#00A68A\", linewidth = 1) +\n  facet_wrap(~parameter_label, scales = \"free_y\", labeller = label_parsed, ncol = 1) +\n  transition_manual(frame) +\n  scale_color_brewer(palette = \"Set1\", name = \"Chain\") +\n  labs(title = \"Traceplot up to Iteration {current_frame}\",\n       x = \"Iteration\", y = \"Parameter Value\") +\n  theme_minimal()\n```\n\nI have a bit more confidence in our posteriors now:\n\n- All chains seem to agree on the same value (they have \"converged\" to the same answer)\n\n- The posteriors look reasonably well estimated (they'll close to the true value - but keep in mind that with real analysis we don't know what the truth is)\n\n- The traceplots resemble \"hairy caterpillars\", which matches the Markov Chain idea that the next value depends only on the current value (it doesn't \"remember\" older values).\n\nThe final thing I want to bring your attention to are the first hundred or so iterations. Generally, these iterations can be pretty wild, fluctuating massively. If you think about it, that's kind of fair enough. We're starting each MCMC chain at random locations, so it's fair if things are a bit **wobbly** at the start. So what we do with these early iterations is to simply ignore them. These are called \"burn in\" iterations, as in, we're letting the engine warm up, so these are just used to get up to speed. Mostly arbitrarily, we typically ignore the first 10% of iterations, so where we've used 1000 iterations, we'd generally ignore the first 100.\n\n# Fitting the occupancy model using MCMC\n\nLet's now revisit our Bayesian model. As a reminder, here's what it looked like:\n\n$$z_i \\sim Bernoulli(\\psi_i)\\\\$$\n\n$$logit(\\psi_i) = \\beta_0 + \\beta_1 \\times Tree_i + \\beta_2 \\times Temp_i\\\\$$\n\n$$y_{i,j} \\sim Bernoulli(p_{i,j} \\times z_i)\\\\$$\n\n$$logit(p_{i,j}) = \\alpha_0 + \\alpha_1 \\times Rain_{i,j}$$\n\nWhich we can translate into the following code. But pay attention to the `n.chains`, `n.samples` and `n.burn` arguments. This is where we specify how many chains we want (`n.chains`), how many iterations we want (`n.samples`, note an iteration can also be called a sample), and how many of the first iterations we want to ignore (`n.burn`).\n\n```{r, message = FALSE, warning = FALSE}\nfit <- PGOcc(\n  occ.formula = ~ tree + temp, \n  det.formula = ~ rain, \n  data = etosha, \n  \n  n.chains = 4,     # 4 chains just like in our simple example\n  n.samples = 2000, # 2000 iterations for each chain\n  n.burn = 200,     # We ignore the first 200 iterations to give MCMC a chance to get it's feet\n  \n  verbose = FALSE   # This just says don't spit out details while fitting \n  # (normally I would leave verbose = TRUE so I can keep track of the model while it's fitting)\n  )\n```\n\nWe can now check how our model worked. The code is pretty simple. The only tricky thing is to specify if you want `beta` or `alpha`. Importantly, `beta` here refers to the occupancy parameters, and `alpha` refers to the detection parameters.\n\nSo here are the traceplots and posteriors for $\\beta_0$, $\\beta_1$ and $\\beta_2$ in:\n\n$$logit(\\psi_i) = \\beta_0 + \\beta_1 \\times Tree_i + \\beta_2 \\times Temp_i\\\\$$\n\n```{r, message = FALSE, warning = FALSE}\nplot(fit, 'beta') # Occupancy parameters.\n```\n\nAnd here are the traceplots and posteriors for $\\alpha_0$ and $\\alpha_1$ in:\n\n$$logit(p_{i,j}) = \\alpha_0 + \\alpha_1 \\times Rain_{i,j}$$\n\n```{r, message = FALSE, warning = FALSE}\nplot(fit, 'alpha') # Detection parameters.\n```\n\nAnd we can also get a more numeric summary of the model using `summary()`. Importantly, the information you see below is the same as the data in the figures above. It's just summarised! So the `Mean` is just the mean of the posteriors above!\n\n```{r, message = FALSE, warning = FALSE}\nsummary(fit)\n```\n\n# Credible intervals\n\nNotice the 2.5% and 97.5% in the tables above? These are the credible intervals that I briefly mentioned in the Occupancy Models: Covariates page. Technically, these are just the quantiles of the posterior. Or, phrased alternatively, 95% of all iterations are within this interval. And keep in mind, that a Bayesian credible interval is not the same as a frequentist confidence interval. For our purposes, these intervals represent a 95% probability to contain the true value (based on the data we collected and the model we fit)!\n\n```{r, message = FALSE, warning = FALSE}\nbeta_0_samples <- fit$beta.samples[,1]\n\nbeta_0_df <- tibble(beta_0 = beta_0_samples)\n\nsummary_stats <- beta_0_df %>%\n  summarise(\n    mean = mean(beta_0),\n    median = median(beta_0),\n    lower = quantile(beta_0, 0.025),\n    upper = quantile(beta_0, 0.975)\n  )\n\nggplot(beta_0_df, aes(x = beta_0)) +\n  geom_histogram(fill = \"#00A68A\", colour = \"white\", alpha = 0.5, bins = 50) +\n  \n  # Vertical lines\n  geom_vline(xintercept = summary_stats$mean, linetype = \"solid\", color = \"black\", linewidth = 1) +\n  geom_vline(xintercept = summary_stats$median, linetype = \"dashed\", color = \"black\", linewidth = 1) +\n  geom_vline(xintercept = summary_stats$lower, linetype = \"dotted\", color = \"black\", linewidth = 1) +\n  geom_vline(xintercept = summary_stats$upper, linetype = \"dotted\", color = \"black\", linewidth = 1) +\n\n  # curved arrows\n  geom_curve(aes(x = summary_stats$mean + 0.5, y = 400, \n                 xend = summary_stats$mean, yend = 350), \n             arrow = arrow(length = unit(0.02, \"npc\")), curvature = 0.3, color = \"black\") +\n  geom_curve(aes(x = summary_stats$median - 0.5, y = 300, \n                 xend = summary_stats$median, yend = 250), \n             arrow = arrow(length = unit(0.02, \"npc\")), curvature = -0.3, color = \"black\") +\n  geom_curve(aes(x = summary_stats$lower - 0.5, y = 100, \n                 xend = summary_stats$lower, yend = 75), \n             arrow = arrow(length = unit(0.02, \"npc\")), curvature = -0.3, color = \"black\") +\n  geom_curve(aes(x = summary_stats$upper + 0.5, y = 100, \n                 xend = summary_stats$upper, yend = 75), \n             arrow = arrow(length = unit(0.02, \"npc\")), curvature = 0.3, color = \"black\") +\n\n  annotate(\"text\", x = summary_stats$mean + 0.5, y = 400, label = \"Mean\", hjust = 0, size = 5) +\n  annotate(\"text\", x = summary_stats$median - 0.5, y = 300, label = \"Median\", hjust = 1, size = 5) +\n  annotate(\"text\", x = summary_stats$lower - 0.5, y = 100, label = \"2.5% CI\", hjust = 1, size = 5) +\n  annotate(\"text\", x = summary_stats$upper + 0.5, y = 100, label = \"97.5% CI\", hjust = 0, size = 5) +\n\n  labs(\n    x = expression(paste(beta[0], \" or '(Intercept)'\")),\n    y = \"Frequency\"\n  ) +\n  theme_minimal()\n```\n\nFrom our summary table, the mean for the $\\beta_0$ or `(Intercept)` posterior was estimated as 2.0536, the median (called `50%` in the summary table) was 1.9727, and the 95% credible intervals were 0.1991 and 4.2706, just like we see in the figure.\n\nThis might seem trivial but having credible intervals be so simple, and the interpretation having a useful meaning is one of the big selling points of Bayesian analysis in my mind. It's not something to trivialise.\n\n# Specifying priors\n\nSo far, we've let the `spOccupancy` package handle setting the priors for us behind the scenes. But we can actually specify our own priors if we want to.\n\nIn the background, `spOccupancy` uses something called PÃ³lya-Gamma data augmentation, and under the hood, this method assumes $Normal$ priors for both the occupancy and detection parameters (including their intercepts).\n\nIf you don't specify anything, spOccupancy will set:\n\n- The \"hypermean\" (mean of $Normal$ distribution for all priors) = 0\n\n- The \"hypervariance\" (variance $Normal$ distribution for all priors) = 2.72\n\nThis corresponds to a relatively flat prior on the probability scale (the 0â€“1 scale for occupancy or detection probabilities). In other words, by default, the prior doesn't strongly pull your estimates toward any particular value; it lets the data mostly speak for itself.\n\nBut we can set these explicitly if we want to! Here's what that looks like:\n\n```{r}\n# Specify priors for detection (alpha) and occupancy (beta)\npriors <- list(\n  alpha.normal = list(mean = 0, var = 2.72),  # Detection priors\n  beta.normal = list(mean = 0, var = 2.72)    # Occupancy priors\n)\n```\n\nThe above code is basically doing what `spOccupancy` does by default. All priors will get $Normal(0,2.72)$ in both the detection and occupancy sub models. We can either give a single number (like 0 and 2.72 above), and it will apply to all parameters, or you can give a vector if you want different priors for different parameters.\n\nHere's how we'd give different priors for each parameter:\n\n```{r}\n# Different priors for each occupancy parameter\noccurrence_priors <- list(\n  mean = c(0, 0.5, -0.5),    # One mean for each occupancy parameter\n  var = c(2.72, 1, 2)        # One variance for each occupancy parameter\n)\n\n# Different priors for each detection parameter\ndetection_priors <- list(\n  mean = c(0, 0.2),          # One mean for each detection parameter\n  var = c(0.5, 1)           # One variance for each detection parameter\n)\n\n# Combine into the priors list\npriors <- list(\n  beta.normal = occurrence_priors,\n  alpha.normal = detection_priors\n)\n\n```\n\nThis would translate into this model:\n\n$$z_i \\sim Bernoulli(\\psi_i)\\\\$$\n\n$$logit(\\psi_i) = \\beta_0 + \\beta_1 \\times Tree_i + \\beta_2 \\times Temp_i\\\\$$\n\n$$\\beta_0 \\sim Normal(0, 2.72)$$\n\n$$\\beta_1 \\sim Normal(0.5, 1)$$\n\n$$\\beta_2 \\sim Normal(-0.5, 2)$$\n\n$$y_{i,j} \\sim Bernoulli(p_{i,j} \\times z_i)\\\\$$\n\n$$logit(p_{i,j}) = \\alpha_0 + \\alpha_1 \\times Rain_{i,j}$$\n\n$$\\alpha_0 \\sim Normal(0, 0.5)$$\n\n$$\\alpha_1 \\sim Normal(0.2, 1)$$\n\nNow, to be very, very clear; I am choosing these priors completely at random just for demonstration. I have no reason, in this case, to think that a reasonable prior for $\\beta_1$ is $Normal(0.5, 1)$.\n\nBut we can always fit this model to see what happens:\n\n```{r, message = FALSE, warning = FALSE}\nfit_priors <- PGOcc(\n  occ.formula = ~ tree + temp,\n  det.formula = ~ rain,\n  data = etosha,\n  priors = priors,     # We add our priors here\n  n.chains = 4,\n  n.samples = 2000,\n  n.burn = 200,\n  verbose = FALSE\n)\n```\n\nHaving fit, we can see what the posteriors look like:\n\n```{r, message = FALSE, warning = FALSE}\nplot(fit_priors, 'beta') # Occupancy parameters.\nplot(fit_priors, 'alpha') # Detection parameters.\n```\n\nAnd pull up the summary:\n\n```{r, message = FALSE, warning = FALSE}\nsummary(fit_priors)\n```\n\nIf we compare this with the original model, where we left the priors at their defaults we can see that different priors can lead to different posteriors. Keep in mind how Bayesian statistics work - the posterior is a combination of our data and prior beliefs. We've changed our prior belief and our posteriors have changed as a result.\n\nNow in this case, the difference in posteriors are pretty minimal. It might not always be. And in truth, we would want to think a bit more carefully about the priors. Don't be fooled here. Just because my randomly chosen priors are different from the default ones doesn't mean the default model is necessarily better. The best option is to choose priors you think are reasonable. If you have different prior beliefs (e.g. I have some informative priors but also some uninformative priors) I can run the model with both, and see how much of a difference it makes. This is something called \"prior sensitivity analysis\" and is a fairly useful tool to have in your back pocket when you're not sure about your priors.\n\n```{r, message = FALSE, warning = FALSE}\nsummary(fit)\n```\n\n# Fin\n\nWith that, you should be good to run a Bayesian occupancy model. Something you can add to your CV and have employers fawn over you. Even better if you understand it, so that when they ask you about it you can have a conversation!\n\nThe only part left in the analysis is including \"spatial autocorrelation\". We'll cover that in the next page.\n\n# A subtle point: Priors and the link function\n\nWhen we choose priors in a Bayesian model, it's really important to remember what scale those priors live on.\n\nIn our occupancy model, we specify priors for the parameters on the logit scale, not directly on the probability (0â€“1) scale.\n\nFor example, if we write:\n\n$$logit(p_i) = \\beta_0 + \\beta_1 \\times x_i$$\n\nthen $\\beta_0$ and $\\beta_1$ are in logit space.\n\nRemember, the logit function stretches the 0â€“1 probability scale onto the whole real line:\n\n- Probabilities near 0.5 correspond to logits near 0.\n\n- Probabilities near 0 or 1 correspond to logits of -$\\inf$ and +âˆž.\n\nThis means that a $Normal$ prior with mean 0 and large variance on the logit scale is not flat on the probability scale! Even \"uninformative\" $Normal$ priors on the logit scale can actually imply very strong beliefs on the probability scale.\n\nTo build some intuition, we'll do a little prior predictive simulation:\n\n- We'll randomly draw values for $\\beta_0$ and $\\beta_1$ from a $Normal(0, 2.72)$ prior.\n\n- We'll simulate the relationship between $x$ and $p(x)$ by plugging those $\\beta_0$ and $\\beta_1$ values into the logit equation.\n\n- We'll repeat this 100 times to show many possible relationships.\n\n```{r}\nset.seed(123)\n\nn_draws <- 100\nx_seq <- seq(-3, 3, length.out = 100)\n\nbeta_0_draws <- rnorm(n_draws, mean = 0, sd = sqrt(2.72))\nbeta_1_draws <- rnorm(n_draws, mean = 0, sd = sqrt(2.72))\n\nprior_simulations <- map2_dfr(\n  beta_0_draws, beta_1_draws,\n  .f = function(b0, b1) {\n    tibble(\n      x = x_seq,\n      logit_p = b0 + b1 * x,\n      p = plogis(logit_p)\n    )\n  },\n  .id = \"draw\"\n)\n# Plot\nggplot(prior_simulations, aes(x = x, y = p, group = draw)) +\n  geom_line(alpha = 0.2, color = \"#FF5733\") +\n  theme_minimal() +\n  labs(\n    title = \"Prior Predictive Simulation\",\n    x = \"Covariate (x)\",\n    y = \"Probability (p)\"\n  )\n```\n\nEach orange line is a possible relationship between $x$ and $p(x)$ given the priors we chose. Notice that some lines are almost flat at 0 or 1? While others are very steep, flipping from 0 to 1 over a narrow range of $x$? Even though the prior on $\\beta_0$ and $\\beta_1$ was centered at 0 with large variance, the resulting priors on $p$ are not uniform or \"neutral.\"\n\nIf I were being hyper cautious, I might be worried these priors are pushing the model towards the extreme flipping behaviour. In some cases that might be good, in others it might be bad.\n\nThe broader points I am making here are:\n\n- Don't stress too much about priors. If you have a lot of data your prior will often not be terribly important.\n\n- But give a little thought as to what a sensible prior would be, especially when working with link functions.\n\nIf you're in doubt speak with me! I think having a discussion about your priors would be an excellent use of one of our meetings (hint, hint)."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"monochrome","toc-depth":2,"output-file":"Bayesian_Occupancy_Models.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","theme":"cosmo","title":"Bayesian Algorithms","author":"Deon Roos","date":"`r Sys.Date()`","toc-location":"right"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}